<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="/atom.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-08-19T16:47:30+02:00</updated><id>/</id><title type="html">Pxmme</title><subtitle>Cybersec enthusiast.</subtitle><author><name>Pxmme</name></author><entry><title type="html">TJCTF - Weird Logo</title><link href="/2018/08/12/TJCTF-Write-Up-Weird-Logo/" rel="alternate" type="text/html" title="TJCTF - Weird Logo" /><published>2018-08-12T00:00:00+02:00</published><updated>2018-08-12T00:00:00+02:00</updated><id>/2018/08/12/TJCTF-Write-Up-Weird-Logo</id><content type="html" xml:base="/2018/08/12/TJCTF-Write-Up-Weird-Logo/">&lt;h2 id=&quot;challenge&quot;&gt;Challenge&lt;/h2&gt;

&lt;p&gt;This company’s logo stands in contrast of those of other leading edge tech companies with its poor design&lt;/p&gt;

&lt;p&gt;[5 points]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Written by jfrucht25&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;initial-thoughts&quot;&gt;Initial thoughts&lt;/h2&gt;

&lt;p&gt;Having a static .png image with this little amount of points rewarded means it won’t be tough.&lt;/p&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;

&lt;p&gt;Let’s start with the basics. The “file” command tells us it is indeed a .png. The “binwalk” and “strings” commands give us nothing interesting. Next step? Stegsolve!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/zardus/ctf-tools/blob/master/stegsolve/install&quot;&gt;You can install it here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is our beautiful logo :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/before.png&quot; alt=&quot;Before&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is what we can find with just a few switches to the right :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/imgs/after.png&quot; alt=&quot;After&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flag : &lt;code class=&quot;highlighter-rouge&quot;&gt;tjctf{in_plain_sight}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;after-thoughts&quot;&gt;After thoughts&lt;/h2&gt;

&lt;p&gt;Not much. This is the very basic of steganography. I’ve encountered it dozens of times in past CTFs.&lt;/p&gt;</content><author><name>Pxmme</name></author><category term="tjctf-2018" /><category term="write-up" /><category term="forensics" /><summary type="html">Challenge This company’s logo stands in contrast of those of other leading edge tech companies with its poor design [5 points] Written by jfrucht25 Initial thoughts Having a static .png image with this little amount of points rewarded means it won’t be tough. Exploitation Let’s start with the basics. The “file” command tells us it is indeed a .png. The “binwalk” and “strings” commands give us nothing interesting. Next step? Stegsolve! You can install it here. Here is our beautiful logo : And here is what we can find with just a few switches to the right : Flag : tjctf{in_plain_sight} After thoughts Not much. This is the very basic of steganography. I’ve encountered it dozens of times in past CTFs.</summary></entry><entry><title type="html">TJCTF - We Will Rock You</title><link href="/2018/08/12/TJCTF-Write-Up-We-Will-Rock-You/" rel="alternate" type="text/html" title="TJCTF - We Will Rock You" /><published>2018-08-12T00:00:00+02:00</published><updated>2018-08-12T00:00:00+02:00</updated><id>/2018/08/12/TJCTF-Write-Up-We-Will-Rock-You</id><content type="html" xml:base="/2018/08/12/TJCTF-Write-Up-We-Will-Rock-You/">&lt;h2 id=&quot;the-challenge&quot;&gt;The challenge&lt;/h2&gt;

&lt;p&gt;Help! I lost the password to my Dogecoin wallet. I had like 10 Dogecoin in there. If you get the password, you’ll get the flag! Flag format: tjctf{password}&lt;/p&gt;

&lt;p&gt;[75 points]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Written by Alaska47&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;initial-thoughts&quot;&gt;Initial thoughts&lt;/h2&gt;

&lt;p&gt;Seeing the name of the challenge, I immediately thought about the &lt;em&gt;infamous&lt;/em&gt; rockyou.txt list of passwords. For those of you who don’t know it, it’s this huge list of passwords that was created out of real, leaked passwords.&lt;/p&gt;

&lt;p&gt;It’s natively present in Kali, check &lt;em&gt;/usr/share/wordlists&lt;/em&gt; and you’ll find a &lt;em&gt;rockyou.txt.gz&lt;/em&gt; :)&lt;/p&gt;

&lt;p&gt;So I assumed I’d have to bruteforce this wallet in order to retrieve the password. I googled for “wallet bruteforce” and found glv2’s &lt;a href=&quot;https://github.com/glv2/bruteforce-wallet&quot; title=&quot;Click here to learn more!&quot;&gt;Github magic thingy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;

&lt;p&gt;First off, let’s clone this github repo.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# git clone https://github.com/glv2/bruteforce-wallet
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let’s install the dependencies required :&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# apt install libdb-dev libssl-dev -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Let’s then try to install it following the README’s instructions.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# cd bruteforce-wallet &amp;amp;&amp;amp; ./autogen.sh
./autogen.sh: 6: ./autogen.sh: autoreconf: not found
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Oops! Seems I need to install a package first.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# apt-get install autoconf
~# ./autogen.sh
configure.ac:6: installing './compile'
configure.ac:2: installing './install-sh'
configure.ac:2: installing './missing'
Makefile.am: installing './depcomp'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then a ./configure, make and make install and we’re good! Now, let’s use our new little tool :3&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# bruteforce-wallet -t 6 -f /root/Documents/rockyou.txt 9d7e6203fb6e2c14646c63bea94e48001b9317c86bec229c3e063904a168dfad_wallet.dat
Warning: using dictionary mode, ignoring options -b, -e, -l, -m and -s.
 
Tried passwords: 59
Tried passwords per second: 59,000000
Last tried password: samantha
 
Password found: tinkerbell
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Got it! Password is “tinkerbell”, hereby flag is : &lt;code class=&quot;highlighter-rouge&quot;&gt;tjctf{tinkerbell}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;after-thoughts&quot;&gt;After thoughts&lt;/h2&gt;

&lt;p&gt;A very basic challenge worth a lot of points compared to other ones in this TJCTF. Still, I enjoyed the five minutes it took me, as I never had to bruteforce a coin-wallet before. Valuable experience!&lt;/p&gt;</content><author><name>Pxmme</name></author><category term="tjctf-2018" /><category term="write-up" /><category term="forensics" /><summary type="html">The challenge Help! I lost the password to my Dogecoin wallet. I had like 10 Dogecoin in there. If you get the password, you’ll get the flag! Flag format: tjctf{password} [75 points] Written by Alaska47 Initial thoughts Seeing the name of the challenge, I immediately thought about the infamous rockyou.txt list of passwords. For those of you who don’t know it, it’s this huge list of passwords that was created out of real, leaked passwords. It’s natively present in Kali, check /usr/share/wordlists and you’ll find a rockyou.txt.gz :) So I assumed I’d have to bruteforce this wallet in order to retrieve the password. I googled for “wallet bruteforce” and found glv2’s Github magic thingy. Exploitation First off, let’s clone this github repo. ~# git clone https://github.com/glv2/bruteforce-wallet Let’s install the dependencies required : ~# apt install libdb-dev libssl-dev -y Let’s then try to install it following the README’s instructions. ~# cd bruteforce-wallet &amp;amp;&amp;amp; ./autogen.sh ./autogen.sh: 6: ./autogen.sh: autoreconf: not found Oops! Seems I need to install a package first. ~# apt-get install autoconf ~# ./autogen.sh configure.ac:6: installing './compile' configure.ac:2: installing './install-sh' configure.ac:2: installing './missing' Makefile.am: installing './depcomp' Then a ./configure, make and make install and we’re good! Now, let’s use our new little tool :3 ~# bruteforce-wallet -t 6 -f /root/Documents/rockyou.txt 9d7e6203fb6e2c14646c63bea94e48001b9317c86bec229c3e063904a168dfad_wallet.dat Warning: using dictionary mode, ignoring options -b, -e, -l, -m and -s. Tried passwords: 59 Tried passwords per second: 59,000000 Last tried password: samantha Password found: tinkerbell Got it! Password is “tinkerbell”, hereby flag is : tjctf{tinkerbell} After thoughts A very basic challenge worth a lot of points compared to other ones in this TJCTF. Still, I enjoyed the five minutes it took me, as I never had to bruteforce a coin-wallet before. Valuable experience!</summary></entry><entry><title type="html">TJCTF - Trippy</title><link href="/2018/08/12/TJCTF-Write-Up-Trippy/" rel="alternate" type="text/html" title="TJCTF - Trippy" /><published>2018-08-12T00:00:00+02:00</published><updated>2018-08-12T00:00:00+02:00</updated><id>/2018/08/12/TJCTF-Write-Up-Trippy</id><content type="html" xml:base="/2018/08/12/TJCTF-Write-Up-Trippy/">&lt;h2 id=&quot;challenge&quot;&gt;Challenge&lt;/h2&gt;

&lt;p&gt;No description&lt;/p&gt;

&lt;p&gt;[5 points]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Written by Alaska47&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;initial-thoughts&quot;&gt;Initial thoughts&lt;/h2&gt;

&lt;p&gt;So, we have no description and a gif file. All of this for little to no points. This should be quick.&lt;/p&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~# wget https://static.tjctf.org/be37fef78cfd6c7deda71154f567e6d0cfefbda1f80698c064bab469d3a54c58_trippy.gif
 
~# strings be37fef78cfd6c7deda71154f567e6d0cfefbda1f80698c064bab469d3a54c58_trippy.gif | grep tjctf
tjctf{w0w}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Meh.&lt;/p&gt;

&lt;p&gt;Flag : &lt;code class=&quot;highlighter-rouge&quot;&gt;tjctf{w0w}&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;after-thoughts&quot;&gt;After thoughts&lt;/h2&gt;

&lt;p&gt;Not much.&lt;/p&gt;</content><author><name>Pxmme</name></author><category term="tjctf-2018" /><category term="write-up" /><category term="misc" /><summary type="html">Challenge No description [5 points] Written by Alaska47 Initial thoughts So, we have no description and a gif file. All of this for little to no points. This should be quick. Exploitation ~# wget https://static.tjctf.org/be37fef78cfd6c7deda71154f567e6d0cfefbda1f80698c064bab469d3a54c58_trippy.gif ~# strings be37fef78cfd6c7deda71154f567e6d0cfefbda1f80698c064bab469d3a54c58_trippy.gif | grep tjctf tjctf{w0w} Meh. Flag : tjctf{w0w} After thoughts Not much.</summary></entry></feed>